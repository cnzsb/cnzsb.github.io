<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奔跑的Q丶</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhaoshibo.net/"/>
  <updated>2017-08-28T10:28:35.000Z</updated>
  <id>http://zhaoshibo.net/</id>
  
  <author>
    <name>赵世博</name>
    <email>cnzsb@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node 爬虫实践 - Gitlab 文件下载</title>
    <link href="http://zhaoshibo.net/blog/2017/08/28/Node%20%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5%20-%20Gitlab%20%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
    <id>http://zhaoshibo.net/blog/2017/08/28/Node 爬虫实践 - Gitlab 文件下载/</id>
    <published>2017-08-28T10:28:26.000Z</published>
    <updated>2017-08-28T10:28:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司的设计图稿等全部存在 Gitlab 上的某个仓库中，恰好某次迭代需要使用到其中的图稿，因为历史图稿使这个仓库异常大，而我只需要其中很小的一部分，就不想 <code>clone</code> 整个仓库而只想下载需要的文件夹。但是在使用 Git 时如果只想下载其中部分的文件夹是一件很复杂的事情，尝试了各种指令后发现无论如何都要先 <code>fetch</code> 整个项目，而下载其中的一个文件却是一件简单的事情，那不如就动手写个爬虫吧。于是就有了这个项目 <a href="https://github.com/cnzsb/gitlab-fileDownloader" target="_blank" rel="external">gitlab-fileDownload</a>：</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2017/08/28/Node%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-Gitlab%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/gitlab-fileDownloader.gif" alt="demo-gitlab-fileDownload"></p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>本项目利用 <code>axios</code> 处理 http 请求，利用 <code>cheerio</code> 解析 <code>HTML</code>。确定用户名、密码等基本配置项：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    url: <span class="string">''</span>,              <span class="comment">// 目标地址</span></div><div class="line">    username: <span class="string">''</span>,</div><div class="line">    password: <span class="string">''</span>,</div><div class="line">    deep: <span class="literal">true</span>,           <span class="comment">// 是否下载文件夹内容</span></div><div class="line">    path: <span class="string">'./downloads'</span>,  <span class="comment">// 下载路径</span></div><div class="line">    cookie: &#123;             <span class="comment">// 登录后保存的 cookie</span></div><div class="line">    value: <span class="string">''</span>,</div><div class="line">    expires: <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后设置了模拟真实环境的请求头，并开启 <code>withCredentials</code> 以具备获取 <code>cookie</code> 的能力：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> $http = axios.create(&#123;</div><div class="line">    withCredentials: <span class="literal">true</span>,   <span class="comment">// 获取 Cookie</span></div><div class="line">    headers: &#123;</div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span>,</div><div class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</div><div class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</div><div class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4'</span>,</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>首先要处理的就是登录：</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2017/08/28/Node%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-Gitlab%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/gitlab-login.jpg" alt="gitlab-login"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">const</span> &#123; urlOrigin &#125; = <span class="keyword">this</span>.opts</div><div class="line">    <span class="keyword">const</span> urlSignIn = <span class="string">`<span class="subst">$&#123;urlOrigin&#125;</span>/users/sign_in`</span></div><div class="line">    <span class="keyword">const</span> resPageSignIn = <span class="keyword">await</span> $http.get(urlSignIn)</div><div class="line">    <span class="keyword">this</span>._writeCookie(resPageSignIn.headers)</div><div class="line">    <span class="keyword">const</span> $ = cheerio.load(resPageSignIn.data)</div><div class="line">    <span class="keyword">const</span> $form = $(<span class="string">'.login-body form'</span>)</div><div class="line">    <span class="keyword">const</span> action = $form.attr(<span class="string">'action'</span>)</div><div class="line">    <span class="keyword">const</span> method = $form.attr(<span class="string">'method'</span>)</div><div class="line">    <span class="keyword">const</span> params = &#123;&#125;</div><div class="line">    params.utf8 = $form.find(<span class="string">'[name="utf8"]'</span>).attr(<span class="string">'value'</span>)</div><div class="line">    params.authenticity_token = $form.find(<span class="string">'[name="authenticity_token"]'</span>).attr(<span class="string">'value'</span>)</div><div class="line">    params.remember_me = <span class="number">1</span>  <span class="comment">// true</span></div><div class="line">    params.username = <span class="keyword">this</span>.opts.username</div><div class="line">    params.password = <span class="keyword">this</span>.opts.password</div><div class="line">    </div><div class="line">    <span class="keyword">const</span> reqOpts = &#123;</div><div class="line">      maxRedirects: <span class="number">0</span>,</div><div class="line">      headers: &#123;</div><div class="line">        Cookie: <span class="keyword">this</span>.opts.cookie.value,</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</div><div class="line">        <span class="string">'Content-Length'</span>: <span class="built_in">JSON</span>.stringify(params).length</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 302</span></div><div class="line">    <span class="keyword">const</span> resLogin = <span class="keyword">await</span> $http[method](<span class="string">`<span class="subst">$&#123;urlOrigin&#125;</span><span class="subst">$&#123;action&#125;</span>`</span>, qs.stringify(params), reqOpts)</div><div class="line">    <span class="keyword">this</span>._writeCookie(resLogin.headers)</div><div class="line">    <span class="keyword">return</span> resolve()</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">'Error On Page SignIn: '</span>, e)</div><div class="line">    <span class="keyword">return</span> reject(e)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据页面的表单获取需要发送的元素，并且把获取到的 <code>cookie</code> 使用存起来，以后根据 <code>expires</code> 决定是否需要更新 <code>cookie</code>。这里的登录成功后会返回 302 重定向至目标页面，如果没有处理的话会被当做错误在 <code>catch</code> 中处理，为了方便（偷懒）。在 <code>axios</code> 的初始化设置中增加了 302 为成功。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    validateStatus: <span class="function"><span class="params">status</span> =&gt;</span> (status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span> || status === <span class="number">302</span>)  <span class="comment">// gitlab 登录 302 重定向</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="解析页面"><a href="#解析页面" class="headerlink" title="解析页面"></a>解析页面</h2><p>在登录后就需要解析目标页面的数据了，因为可能会遇到文件夹的情况，因此在开始的配置项中增加了 <code>deep</code> 决定是否深度解析文件夹的能力。</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2017/08/28/Node%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-Gitlab%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/gitlab-target-url.jpg" alt="gitlab-target-url"></p>
<p>根据页面的结构存储对应资源的名称、下载路径及所在目录地址，根据 <code>deep</code> 决定是否递归：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> $files = $(<span class="string">'.tree-table .tree-item .tree-item-file-name a'</span>)</div><div class="line"><span class="keyword">const</span> dicts = []</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; $files.length; i++) &#123;</div><div class="line">    <span class="keyword">const</span> $file = $files.eq(i)</div><div class="line">    <span class="keyword">const</span> name = $file.attr(<span class="string">'title'</span>)</div><div class="line">    <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.opts.urlOrigin&#125;</span><span class="subst">$&#123;$file.attr(<span class="string">'href'</span>).replace(<span class="string">'/blob/'</span>, <span class="string">'/raw/'</span>)&#125;</span>`</span></div><div class="line">    <span class="comment">// 根目录 '..' 没有 name</span></div><div class="line">    <span class="keyword">if</span> (!name) <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> (!url.includes(<span class="string">'/raw/'</span>)) &#123;</div><div class="line">      <span class="comment">// 同步使结果可控</span></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.opts.deep) dicts.push(...await <span class="keyword">this</span>.getDict(url, <span class="string">`<span class="subst">$&#123;dirname&#125;</span><span class="subst">$&#123;name&#125;</span>/`</span>))</div><div class="line">      <span class="keyword">continue</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dicts.push(&#123; name, url, dirname &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="下载资源"><a href="#下载资源" class="headerlink" title="下载资源"></a>下载资源</h2><p>在获得了所有的资源后便是进行爬取资源并写入硬盘的操作，这里使用了同步下载，因此又是一个递归操作（懒得缓存一个箭头函数并且调用了，因此需要注意 <code>this</code> 的使用）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">_download(dicts) &#123;</div><div class="line"><span class="keyword">const</span> root = <span class="keyword">this</span>.opts.path</div><div class="line"><span class="keyword">const</span> count = dicts.length</div><div class="line"><span class="keyword">const</span> headers = &#123; <span class="attr">Cookie</span>: <span class="keyword">this</span>.opts.cookie.value &#125;</div><div class="line"><span class="keyword">return</span> (<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> dirname = <span class="string">`<span class="subst">$&#123;root&#125;</span><span class="subst">$&#123;source.dirname&#125;</span>`</span></div><div class="line">    <span class="keyword">if</span> (!fs.existsSync(dirname)) mkdirSync(dirname)</div><div class="line">        </div><div class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> $http.get(source.url, &#123;</div><div class="line">        responseType: <span class="string">'stream'</span>,</div><div class="line">        headers,</div><div class="line">    &#125;)</div><div class="line">    data.pipe(fs.createWriteStream(<span class="string">`<span class="subst">$&#123;dirname&#125;</span>/<span class="subst">$&#123;source.name&#125;</span>`</span>))</div><div class="line">        </div><div class="line">    <span class="keyword">if</span> (!dicts.length) <span class="keyword">return</span></div><div class="line">    <span class="keyword">return</span> downloadFile(dicts.shift())</div><div class="line">&#125;)(dicts.shift())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中在保存文件的时候需要检测是否存在文件夹，并且按需进行创建：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mkdirSync</span>(<span class="params">filepath</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (fs.existsSync(filepath)) <span class="keyword">return</span></div><div class="line">    mkdirSync(path.dirname(filepath))</div><div class="line">    fs.mkdirSync(filepath)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>随后为了更直观的观测进度又增加了命令行的可视化输出，这一部分及项目的完整代码可以访问 <a href="https://github.com/cnzsb/gitlab-fileDownloader" target="_blank" rel="external">Github 仓库</a>查看。</p>
<p>另外思考一个问题，本项目中使用的全部是同步代码，而没有利用异步去处理。其中可以优化的地方就是在解析资源的同时爬取并写入硬盘，但是在变更为异步代码的过程中发现同时发起请求会导致服务器错误，而最小的间隔需要控制在 100ms 左右，当手动控制每 100ms 发起一次请求时却又发现此时的总任务时间慢于同步爬虫，因为受实际网速影响可能下载一个资源会小于 100ms，因此最终没有采用异步的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司的设计图稿等全部存在 Gitlab 上的某个仓库中，恰好某次迭代需要使用到其中的图稿，因为历史图稿使这个仓库异常大，而我只需要其中很小的一部分，就不想 &lt;code&gt;clone&lt;/code&gt; 整个仓库而只想下载需要的文件夹。但是在使用 Git 时如果只想下载其中部分的文件夹是一件很复杂的事情，尝试了各种指令后发现无论如何都要先 &lt;code&gt;fetch&lt;/code&gt; 整个项目，而下载其中的一个文件却是一件简单的事情，那不如就动手写个爬虫吧。于是就有了这个项目 &lt;a href=&quot;https://github.com/cnzsb/gitlab-fileDownloader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gitlab-fileDownload&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xlivs.com1.z0.glb.clouddn.com/2017/08/28/Node%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B5-Gitlab%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/gitlab-fileDownloader.gif&quot; alt=&quot;demo-gitlab-fileDownload&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node" scheme="http://zhaoshibo.net/tags/Node/"/>
    
      <category term="Crawler" scheme="http://zhaoshibo.net/tags/Crawler/"/>
    
  </entry>
  
  <entry>
    <title>隐藏滚动条方法</title>
    <link href="http://zhaoshibo.net/blog/2017/08/14/%E9%9A%90%E8%97%8F%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%96%B9%E6%B3%95/"/>
    <id>http://zhaoshibo.net/blog/2017/08/14/隐藏滚动条方法/</id>
    <published>2017-08-14T03:30:26.000Z</published>
    <updated>2017-08-23T08:39:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>隐藏滚动条方法：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="comment">/* only 'overflow-x: hidden' for firefox */</span></div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line"></div><div class="line">    .target &#123;</div><div class="line">        <span class="selector-tag">overflow-y</span>: <span class="selector-tag">scroll</span>;</div><div class="line">        <span class="comment">/* ie */</span></div><div class="line">        <span class="selector-tag">-ms-overflow-style</span>: <span class="selector-tag">none</span>;</div><div class="line">        </div><div class="line">        <span class="comment">/* chrome */</span></div><div class="line">        &amp;<span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</div><div class="line">          <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">/* firefox (unreliable) */</span></div><div class="line">        @-<span class="keyword">moz</span>-<span class="keyword">document</span> url-prefix() &#123;</div><div class="line">          &amp; &#123;</div><div class="line">            <span class="attribute">margin-right</span>: -<span class="number">16px</span>;</div><div class="line">            <span class="attribute">padding-right</span>: <span class="number">16px</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;隐藏滚动条方法：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div clas
    
    </summary>
    
    
      <category term="Tips" scheme="http://zhaoshibo.net/tags/Tips/"/>
    
      <category term="CSS" scheme="http://zhaoshibo.net/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JS 中的广度与深度优先遍历</title>
    <link href="http://zhaoshibo.net/blog/2017/05/09/JS%20%E4%B8%AD%E7%9A%84%E5%B9%BF%E5%BA%A6%E4%B8%8E%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"/>
    <id>http://zhaoshibo.net/blog/2017/05/09/JS 中的广度与深度优先遍历/</id>
    <published>2017-05-09T09:37:57.000Z</published>
    <updated>2017-05-09T09:46:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在有一种类似树的数据结构，但是不存在共同的根节点 root，每一个节点的结构为 <code>{key: &#39;one&#39;, value: &#39;1&#39;, children: [...]}</code>，都包含 <code>key</code> 和 <code>value</code>，如果存在 <code>children</code> 则内部会存在 <code>n</code> 个和此结构相同的节点，现模拟数据如下图：</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2017/05/09/%E5%B9%BF%E5%BA%A6%E4%B8%8E%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/data.png" alt="原始数据结构"></p>
<p>已知一个 <code>value</code> 如 <code>3-2-1</code>，需要取出该路径上的所有 <code>key</code>，即期望得到 <code>[&#39;three&#39;, &#39;three-two&#39;, &#39;three-two-one&#39;]</code>。</p>
<a id="more"></a>
<h2 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h2><p>广度优先的算法如下图：</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2017/05/09/%E5%B9%BF%E5%BA%A6%E4%B8%8E%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/bfs.png" alt="bfs"></p>
<p>从上图可以轻易看出广度优先即是按照数据结构的层次一层层遍历搜索。首先需要把外层的数据结构放入一个待搜索的队列（Queue）中，进而对这个队列进行遍历，当正在遍历的节点存在子节点（<code>children</code>）时则把此子节点下所有节点放入待搜索队列的末端。因为本需求需要记录路径，因此还需要对这些数据做一些特殊处理，此处采用了为这些节点增加 <code>parent</code> 即来源的方法。对此队列依次搜索直至找到目标节点时，可通过深度遍历此节点的 <code>parent</code> 从而获得到整个目标路径。具体代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 广度优先遍历</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findPathBFS</span>(<span class="params">source, goal</span>) </span>&#123;</div><div class="line">  <span class="comment">// 深拷贝原始数据</span></div><div class="line">  <span class="keyword">var</span> dataSource = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(source))</div><div class="line">  <span class="keyword">var</span> res = []</div><div class="line">  <span class="comment">// 每一层的数据都 push 进 res</span></div><div class="line">  res.push(...dataSource)</div><div class="line">  <span class="comment">// res 动态增加长度</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> curData = res[i]</div><div class="line">    <span class="comment">// 匹配成功</span></div><div class="line">    <span class="keyword">if</span> (curData.value === goal) &#123;</div><div class="line">      <span class="keyword">var</span> result = []</div><div class="line">      <span class="comment">// 返回当前对象及其父节点所组成的结果</span></div><div class="line">      <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> <span class="title">findParent</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        result.unshift(data.key)</div><div class="line">        <span class="keyword">if</span> (data.parent) <span class="keyword">return</span> findParent(data.parent)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">      &#125;)(curData)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果有 children 则 push 进 res 中待搜索</span></div><div class="line">    <span class="keyword">if</span> (curData.children) &#123;</div><div class="line">      res.push(...curData.children.map(<span class="function"><span class="params">d</span> =&gt;</span> &#123;</div><div class="line">        <span class="comment">// 在每一个数据中增加 parent，为了记录路径使用</span></div><div class="line">        d.parent = curData</div><div class="line">        <span class="keyword">return</span> d</div><div class="line">      &#125;))</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 没有搜索到结果，默认返回空数组</span></div><div class="line">  <span class="keyword">return</span> []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h2><p>深度优先的算法如下图：</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2017/05/09/%E5%B9%BF%E5%BA%A6%E4%B8%8E%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/dfs.png" alt="dfs"></p>
<p>深度优先即是取得要遍历的节点时如果发现有子节点（<code>children</code>） 时，则不断的深度遍历，并把这些节点放入一个待搜索的栈（Stack）中，直到最后一个没有子节点的节点时，开始对栈进行搜索。后进先出（下列代码中使用了 <code>push</code> 方法入栈，因此需使用 <code>pop</code> 方法出栈），如果没有匹配到，则删掉此节点，同时删掉父节点中的自身，不断重复遍历直到匹配为止。<strong>注意，常规的深度优先并不会破坏原始数据结构，而是采用 <code>isVisited</code> 或者颜色标记法进行表示，原理相同，此处简单粗暴做了删除处理。</strong>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 深度优先遍历</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findPathDFS</span>(<span class="params">source, goal</span>) </span>&#123;</div><div class="line">  <span class="comment">//  把所有资源放到一个树的节点下，因为会改变原数据，因此做深拷贝处理</span></div><div class="line">  <span class="keyword">var</span> dataSource = [&#123;<span class="attr">children</span>: <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(source))&#125;]</div><div class="line">  <span class="keyword">var</span> res = []</div><div class="line">  <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!data.length) <span class="keyword">return</span> res</div><div class="line">    res.push(data[<span class="number">0</span>])</div><div class="line">    <span class="comment">// 深度搜索一条数据，存取在数组 res 中</span></div><div class="line">    <span class="keyword">if</span> (data[<span class="number">0</span>].children) <span class="keyword">return</span> dfs(data[<span class="number">0</span>].children)</div><div class="line">    <span class="comment">// 匹配成功</span></div><div class="line">    <span class="keyword">if</span> (res[res.length - <span class="number">1</span>].value === goal) &#123;</div><div class="line">      <span class="comment">// 删除自己添加树的根节点</span></div><div class="line">      res.shift()</div><div class="line">      <span class="keyword">return</span> res.map(<span class="function"><span class="params">r</span> =&gt;</span> r.key)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 匹配失败则删掉当前比对的节点</span></div><div class="line">    res.pop()</div><div class="line">    <span class="comment">// 没有匹配到任何值则 return</span></div><div class="line">    <span class="keyword">if</span> (!res.length) <span class="keyword">return</span> res</div><div class="line">    <span class="comment">// 取得最后一个节点，待做再次匹配</span></div><div class="line">    <span class="keyword">var</span> lastNode = res[res.length - <span class="number">1</span>]</div><div class="line">    <span class="comment">// 删除已经匹配失败的节点（即为上面 res.pop() 的内容）</span></div><div class="line">    lastNode.children.shift()</div><div class="line">    <span class="comment">// 没有 children 时</span></div><div class="line">    <span class="keyword">if</span> (!lastNode.children.length) &#123;</div><div class="line">      <span class="comment">// 删除空 children，且此时需要深度搜索的为 res 的最后一个值</span></div><div class="line">      <span class="keyword">delete</span> lastNode.children</div><div class="line">      <span class="keyword">return</span> dfs([res.pop()])</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dfs(lastNode.children)</div><div class="line">  &#125;)(dataSource)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法在思考时，添加了根节点以把数据转换成树，并在做深度遍历时传入了子节点数组 <code>children</code> 作为参数，其实多有不便，于是优化后的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 优化后的深度搜索</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findPathDFS</span>(<span class="params">source, goal</span>) </span>&#123;</div><div class="line">  <span class="comment">// 因为会改变原数据，因此做深拷贝处理</span></div><div class="line">  <span class="keyword">var</span> dataSource = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(source))</div><div class="line">  <span class="keyword">var</span> res = []</div><div class="line">  <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    res.push(data)</div><div class="line">    <span class="comment">// 深度搜索一条数据，存取在数组 res 中</span></div><div class="line">    <span class="keyword">if</span> (data.children) <span class="keyword">return</span> dfs(data.children[<span class="number">0</span>])</div><div class="line">    <span class="comment">// 匹配成功</span></div><div class="line">    <span class="keyword">if</span> (res[res.length - <span class="number">1</span>].value === goal) &#123;</div><div class="line">      <span class="keyword">return</span> res.map(<span class="function"><span class="params">r</span> =&gt;</span> r.key)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 匹配失败则删掉当前比对的节点</span></div><div class="line">    res.pop()</div><div class="line">    <span class="comment">// 没有匹配到任何值则 return，如果源数据有值则再次深度搜索</span></div><div class="line">    <span class="keyword">if</span> (!res.length) <span class="keyword">return</span> !!dataSource.length ? dfs(dataSource.shift()) : res</div><div class="line">    <span class="comment">// 取得最后一个节点，待做再次匹配</span></div><div class="line">    <span class="keyword">var</span> lastNode = res[res.length - <span class="number">1</span>]</div><div class="line">    <span class="comment">// 删除已经匹配失败的节点（即为上面 res.pop() 的内容）</span></div><div class="line">    lastNode.children.shift()</div><div class="line">    <span class="comment">// 没有 children 时</span></div><div class="line">    <span class="keyword">if</span> (!lastNode.children.length) &#123;</div><div class="line">      <span class="comment">// 删除空 children，且此时需要深度搜索的为 res 的最后一个值</span></div><div class="line">      <span class="keyword">delete</span> lastNode.children</div><div class="line">      <span class="keyword">return</span> dfs(res.pop())</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dfs(lastNode.children[<span class="number">0</span>])</div><div class="line">  &#125;)(dataSource.shift())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>改进后的方法只关心传入的节点，如果存在子节点则内部自行处理，而非预先传入所有子节点数组进行处理，此方法更易理解一些。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上便是广度与深度遍历在 JS 中的应用，代码可在 <a href="https://codepen.io/cnzsb/pen/LyjgXL" target="_blank" rel="external">codepen</a> 中查看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在有一种类似树的数据结构，但是不存在共同的根节点 root，每一个节点的结构为 &lt;code&gt;{key: &amp;#39;one&amp;#39;, value: &amp;#39;1&amp;#39;, children: [...]}&lt;/code&gt;，都包含 &lt;code&gt;key&lt;/code&gt; 和 &lt;code&gt;value&lt;/code&gt;，如果存在 &lt;code&gt;children&lt;/code&gt; 则内部会存在 &lt;code&gt;n&lt;/code&gt; 个和此结构相同的节点，现模拟数据如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xlivs.com1.z0.glb.clouddn.com/2017/05/09/%E5%B9%BF%E5%BA%A6%E4%B8%8E%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/data.png&quot; alt=&quot;原始数据结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;已知一个 &lt;code&gt;value&lt;/code&gt; 如 &lt;code&gt;3-2-1&lt;/code&gt;，需要取出该路径上的所有 &lt;code&gt;key&lt;/code&gt;，即期望得到 &lt;code&gt;[&amp;#39;three&amp;#39;, &amp;#39;three-two&amp;#39;, &amp;#39;three-two-one&amp;#39;]&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhaoshibo.net/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>git rebase 批量合并 commits</title>
    <link href="http://zhaoshibo.net/blog/2017/05/04/git%20rebase%20%E6%89%B9%E9%87%8F%E5%90%88%E5%B9%B6%20commits/"/>
    <id>http://zhaoshibo.net/blog/2017/05/04/git rebase 批量合并 commits/</id>
    <published>2017-05-04T07:48:27.000Z</published>
    <updated>2017-05-04T07:48:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>git rebase</code> 是一个经常用以美化分支线的指令，近来听说了一个 <code>squash</code> 的指令可以用来合并多个 <code>commits</code>，研究后更是觉得 <code>rebase</code> 的神奇了，本文做一个记录。</p>
<a id="more"></a>
<p>现在有以下 <code>commits</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* fc24432 - (HEAD -&gt; master) third commit (2 seconds ago) &lt;cnzsb&gt;</div><div class="line">* 508a1a0 - second commit (81 seconds ago) &lt;cnzsb&gt;</div><div class="line">* 559f659 - first commit (2 minutes ago) &lt;cnzsb&gt;</div><div class="line">* 40a59bc - initial commit (5 minutes ago) &lt;cnzsb&gt;</div></pre></td></tr></table></figure>
<p>现在我们把最新提交的 3 次 <code>commit</code> 合并为一次修改则可以使用 <code>git rebase -i HEAD~3</code> 指令（更多参数含义参见 <a href="https://git-scm.com/docs/git-rebase" target="_blank" rel="external">git rebase 文档</a>）。</p>
<p>其中 <code>pick</code> 是挑选出的基准 <code>commit</code>，对需要合并的 <code>commit</code> 使用 <code>squash</code> 或 <code>s</code> 则会保存该 <code>commit</code> 的 <code>commit message</code> 并合并在其前一个 <code>commit</code> 上，最终自己可以更新 <code>commit message</code> 信息；也可以使用 <code>fixup</code> 或 <code>f</code> 丢弃 <code>commit message</code> 并合并，这样最终的 <code>commit message</code> 会是 <code>pick</code> 的那条信息。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">pick 559f659 first commit</div><div class="line">s 508a1a0 second commit</div><div class="line">s fc24432 third commit</div><div class="line"></div><div class="line"><span class="comment"># Rebase 40a59bc..fc24432 onto 40a59bc (3 commands)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Commands:</span></div><div class="line"><span class="comment"># p, pick = use commit</span></div><div class="line"><span class="comment"># r, reword = use commit, but edit the commit message</span></div><div class="line"><span class="comment"># e, edit = use commit, but stop for amending</span></div><div class="line"><span class="comment"># s, squash = use commit, but meld into previous commit</span></div><div class="line"><span class="comment"># f, fixup = like "squash", but discard this commit's log message</span></div><div class="line"><span class="comment"># x, exec = run command (the rest of the line) using shell</span></div><div class="line"><span class="comment"># d, drop = remove commit</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Note that empty commits are commented out</span></div></pre></td></tr></table></figure>
<p>这里使用 <code>squash</code>，得到下面的信息。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This is a combination of 3 commits.</span></div><div class="line"><span class="comment"># This is the 1st commit message:</span></div><div class="line">first commit</div><div class="line"></div><div class="line"><span class="comment"># This is the commit message #2:</span></div><div class="line"></div><div class="line">second commit</div><div class="line"></div><div class="line"><span class="comment"># This is the commit message #3:</span></div><div class="line"></div><div class="line">third commit</div><div class="line"></div><div class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></div><div class="line"><span class="comment"># with '#' will be ignored, and an empty message aborts the commit.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Date:      Thu May 4 14:36:40 2017 +0800</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># interactive rebase in progress; onto 40a59bc</span></div><div class="line"><span class="comment"># Last commands done (3 commands done):</span></div><div class="line"><span class="comment">#    s 508a1a0 second commit</span></div><div class="line"><span class="comment">#    s fc24432 third commit</span></div><div class="line"><span class="comment"># No commands remaining.</span></div><div class="line"><span class="comment"># You are currently editing a commit while rebasing branch 'master' on '40a59bc'.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Changes to be committed:</span></div><div class="line"><span class="comment">#       new file:   commits.txt</span></div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure>
<p>可以看到每个对应的 <code>commit message</code>，我们这里删掉所有不需要的 <code>commit message</code>，并且保存为 “<em>create commits.txt and update cotents</em>”，最后可以看到成功信息。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[detached HEAD b073a14] create commits.txt and update cotents</div><div class="line"> Date: Thu May 4 14:36:40 2017 +0800</div><div class="line"> 1 file changed, 3 insertions(+)</div><div class="line"> create mode 100644 commits.txt</div><div class="line">Successfully rebased and updated refs/heads/master.</div></pre></td></tr></table></figure>
<p>新的 <code>commits</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* b073a14 - (HEAD -&gt; master) create commits.txt and update cotents (11 minutes ago) &lt;cnzsb&gt;</div><div class="line">* 40a59bc - initial commit (65 minutes ago) &lt;cnzsb&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;git rebase&lt;/code&gt; 是一个经常用以美化分支线的指令，近来听说了一个 &lt;code&gt;squash&lt;/code&gt; 的指令可以用来合并多个 &lt;code&gt;commits&lt;/code&gt;，研究后更是觉得 &lt;code&gt;rebase&lt;/code&gt; 的神奇了，本文做一个记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://zhaoshibo.net/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>踩坑对象解构赋值</title>
    <link href="http://zhaoshibo.net/blog/2017/05/04/%E8%B8%A9%E5%9D%91%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    <id>http://zhaoshibo.net/blog/2017/05/04/踩坑对象解构赋值/</id>
    <published>2017-05-04T01:51:06.000Z</published>
    <updated>2017-05-04T03:04:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>对象的解构赋值为日常代码的开发提供了很大的便利，尤其适用 React 开发中对 <code>state</code> 中的引用数据类型 copy 一份再去操作的情况。在使用了如此久的情况下一直没有深究解构赋值或者 <code>Object.assign</code> 的浅拷贝会产生什么影响，于是终于踩到坑了。</p>
<a id="more"></a>
<p>由于浅拷贝的原因，上面所说的在 React 中的应用也就存在了问题。来看下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> deepObj = &#123;</div><div class="line">    obj: &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;,</div><div class="line">    num: <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> copyObj = &#123;...deepObj&#125;</div><div class="line"><span class="built_in">console</span>.log(copyObj === deepObj)    <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(copyObj.obj === deepObj.obj)    <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>从代码中可清晰的发现浅拷贝仅影响被拷贝的第一层结构，而内部数据还是保持了与原数据的引用关系，即此时若操作 <code>copyObj.obj</code> 则会引发 <code>deepObj.obj</code> 数据的同步变更，这显然不是我们想要的结果。</p>
<p>因此，一定要注意在浅拷贝的时候如果要操作内部数据的话则需要再次对引用类型进行拷贝，或者一开始就使用 <code>JSON.parse(JSON.stringify(deepObj))</code> 这种小技巧对原数据进行深拷贝，或是干脆使用 <a href="http://facebook.github.io/immutable-js/" target="_blank" rel="external">Immutable</a> 来避免可变数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对象的解构赋值为日常代码的开发提供了很大的便利，尤其适用 React 开发中对 &lt;code&gt;state&lt;/code&gt; 中的引用数据类型 copy 一份再去操作的情况。在使用了如此久的情况下一直没有深究解构赋值或者 &lt;code&gt;Object.assign&lt;/code&gt; 的浅拷贝会产生什么影响，于是终于踩到坑了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhaoshibo.net/tags/JavaScript/"/>
    
      <category term="React" scheme="http://zhaoshibo.net/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>文本框光标处插入数据的方法</title>
    <link href="http://zhaoshibo.net/blog/2017/05/03/%E6%96%87%E6%9C%AC%E6%A1%86%E5%85%89%E6%A0%87%E5%A4%84%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://zhaoshibo.net/blog/2017/05/03/文本框光标处插入数据的方法/</id>
    <published>2017-05-03T11:07:33.000Z</published>
    <updated>2017-05-03T11:07:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 React 项目中遇到一个需求，点击 <code>tags</code> 后插入进正在编辑的 <code>textarea</code> 中。</p>
<p>在翻阅了一些网上的答案后发现基本上都在围绕 <code>setSelectionRange</code> 展开，然而我并不想选中啊，好吧，没有耐心再去找了。自己再去尝试下，每次把光标移出文本框后通过控制台 <code>focus</code> 会发现光标依旧定位在移出时的位置，再联系上面的 <code>api</code>，让我意识到 <code>input</code> 是存在一个记录光标位置的类似属性的。在控制台直接打印出 <code>input</code>，寻寻觅觅发现了神奇的东西 <code>selectionStart</code> 和 <code>selectionEnd</code>。修改相应的值，发现两值不一样时会选中区间内的文本，再次 <code>focus</code> 也就是定位到了可以修改这个选中值的地方了，完美~</p>
<a id="more"></a>
<p>因此通过修改当前文本框的 <code>selectionStart</code> 和 <code>selectionEnd</code> 即可自定义 <code>focus</code> 的光标位置了。下面是<a href="https://codepen.io/cnzsb/pen/aWybrR" target="_blank" rel="external">示例代码</a>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"textarea"</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"50"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>插入一个随机值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> textarea = <span class="built_in">document</span>.getElementById(<span class="string">'textarea'</span>)</div><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>)</div><div class="line"></div><div class="line">button.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">var</span> value = textarea.value.split(<span class="string">''</span>)</div><div class="line">  <span class="keyword">var</span> pos = textarea.selectionStart</div><div class="line">  <span class="comment">// 光标处插入 4 位数随机值</span></div><div class="line">  <span class="keyword">var</span> insertValue = <span class="string">`&#123;&#123;<span class="subst">$&#123;<span class="built_in">Math</span>.random().toString().slice(<span class="number">2</span>, <span class="number">6</span>)&#125;</span>&#125;&#125;`</span></div><div class="line">  value.splice(pos, <span class="number">0</span>, insertValue)</div><div class="line">  textarea.value = value.join(<span class="string">''</span>)</div><div class="line">  <span class="comment">// 定位新的光标位置</span></div><div class="line">  textarea.selectionStart = textarea.selectionEnd = pos + insertValue.length</div><div class="line">  textarea.focus()</div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>最后，我们的项目使用了 <a href="https://ant.design" target="_blank" rel="external">antd</a>，对文本框使用 <a href="https://ant.design/components/form/" target="_blank" rel="external">setFieldsValue</a> 赋值，这时候需要注意异步的问题，可以使用 <code>setTimeout(func, 0)</code> 来解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 React 项目中遇到一个需求，点击 &lt;code&gt;tags&lt;/code&gt; 后插入进正在编辑的 &lt;code&gt;textarea&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;在翻阅了一些网上的答案后发现基本上都在围绕 &lt;code&gt;setSelectionRange&lt;/code&gt; 展开，然而我并不想选中啊，好吧，没有耐心再去找了。自己再去尝试下，每次把光标移出文本框后通过控制台 &lt;code&gt;focus&lt;/code&gt; 会发现光标依旧定位在移出时的位置，再联系上面的 &lt;code&gt;api&lt;/code&gt;，让我意识到 &lt;code&gt;input&lt;/code&gt; 是存在一个记录光标位置的类似属性的。在控制台直接打印出 &lt;code&gt;input&lt;/code&gt;，寻寻觅觅发现了神奇的东西 &lt;code&gt;selectionStart&lt;/code&gt; 和 &lt;code&gt;selectionEnd&lt;/code&gt;。修改相应的值，发现两值不一样时会选中区间内的文本，再次 &lt;code&gt;focus&lt;/code&gt; 也就是定位到了可以修改这个选中值的地方了，完美~&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhaoshibo.net/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>从一个 CRUD 上手 React 和 AntD</title>
    <link href="http://zhaoshibo.net/blog/2017/03/09/%E4%BB%8E%E4%B8%80%E4%B8%AA%20CRUD%20%E4%B8%8A%E6%89%8B%20React%20%E5%92%8C%20AntD/"/>
    <id>http://zhaoshibo.net/blog/2017/03/09/从一个 CRUD 上手 React 和 AntD/</id>
    <published>2017-03-09T15:36:05.000Z</published>
    <updated>2017-03-09T16:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>换了新公司后，技术栈使用的是 react。虽然一路从 vue 1 到 vue 2，但是我还是对 react 有好感的，当初学习 vue 1 文档少的可怜的时候也是借鉴了不少 react 的文章才得以理解，因此在接下来的文章中会小部分的对比下 react 和 vue 的不同。本次的文章主要是关于初次接触 react，并开发出一个具有 CRUD 功能页面的过程。提前了解本项目的详情请点击 <a href="https://github.com/cnzsb/react-antd-crud" target="_blank" rel="external">GitHub 地址</a>和<a href="http://www.zhaoshibo.net/react-antd-crud/" target="_blank" rel="external">线上预览地址</a>。</p>
<a id="more"></a>
<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><p>本项目其实是一个入职的 training project，项目需求就是做一个 CRUD 的管理页面。要求基础框架仅使用 react （不含 redux 之类的）和 antd，AJAX 库使用的是公司基于 axios 封装的库。项目提供了数据库和一个不完整的接口（好吧，其实只有其中一张表的 get），鉴于此这个项目使用了前端的方法仅做展示使用。</p>
<h2 id="学习-React"><a href="#学习-React" class="headerlink" title="学习 React"></a>学习 React</h2><p>先把项目需求放一边，对于没接触过 react 自然应该先把基本的语法学习一下。我是先看了官方的 <a href="https://facebook.github.io/react/tutorial/tutorial.html" target="_blank" rel="external">tutorial</a> 之后去看<a href="https://facebook.github.io/react/docs/installation.html" target="_blank" rel="external">文档</a>，因为时间比较紧，所以只计划了 2 天的时间，这点时间我只看到了 “Optimizing Performance” 这一章。</p>
<h3 id="与-Vue-的异同"><a href="#与-Vue-的异同" class="headerlink" title="与 Vue 的异同"></a>与 Vue 的异同</h3><p>因为接触过 vue，所以在读文档时自然而然就会在心中做一个对比。</p>
<h4 id="1-语法区别"><a href="#1-语法区别" class="headerlink" title="1. 语法区别"></a>1. 语法区别</h4><p>虽然 vue 2 已经支持 JSX 的写法了，但是多数情况下都是用模板语法进行开发的。而 react 的 “all in js” 的理念一上来会让代码读起来有点痛苦，不过适应了之后其实和模板语法也没什么区别，简单理解在 vue 中习惯把 <code>template</code> 放在最上面，而 react 的 <code>render</code> 是在最下面的。另外在 react 中的作用域 <code>this</code> 需要特别注意。</p>
<p>vue 提供了 <code>v-for</code>、<code>v-if</code> 等的语法方便渲染 DOM。而在 react 中推荐抽离组件的思维，也就是一个可以复用的 <code>li</code> 完全可以自成一个组件，随后我们可以利用 JS 的 <code>map</code>、<code>if</code> 等方法直接进行操作。</p>
<h4 id="2-单项数据流和双向绑定"><a href="#2-单项数据流和双向绑定" class="headerlink" title="2. 单项数据流和双向绑定"></a>2. 单项数据流和双向绑定</h4><p>react 推崇单向数据流，而 vue 是双向绑定的。vue 从 1 升级到 2 之后也开始推荐单向传递、父子组件独立的思维，如移除了 <code>props</code> 的 <code>twoway</code>等。</p>
<p>这里不得不提的就是 <code>props</code>，vue 2 版本中为了排除父子组件的耦合，移除了旧的 <code>$dispatch</code> 和 <code>$broadcast</code>，假设不使用 eventbus 和 vuex 的情况下，我的开发思路一般都是子组件仅用来接受上层处理好的数据而不独立处理数据，因此方法一般都存在于父组件之中。</p>
<p>而 react 在不使用其他状态管理的情况下，一般需要通过父组件提供的方法来操作从父组件传进子组件的数据。假设存在父组件 A 和 子组件 B，处理方法如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 子组件 B</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;label&gt;</div><div class="line">                子组件的输入框：</div><div class="line">                    &lt;input value=&#123;<span class="keyword">this</span>.props.value&#125; onChange=&#123;<span class="keyword">this</span>.props.onChange&#125; /&gt;</div><div class="line">                &lt;<span class="regexp">/label&gt;</span></div><div class="line"><span class="regexp">            &lt;/</span>div&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 父组件 A</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">      <span class="keyword">super</span>()       <span class="comment">// 一般情况下传递参数 props 其实没有用，而如果在 constructor 中则使用了 this.props 则必须写入参数</span></div><div class="line">      <span class="keyword">this</span>.state = &#123;</div><div class="line">        value: <span class="string">''</span></div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="keyword">this</span>.onChange = <span class="keyword">this</span>.onChange.bind(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    onChange(event) &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            value: event.target.value</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;B value=&#123;<span class="keyword">this</span>.state.value&#125; onChange=&#123;<span class="keyword">this</span>.onChange&#125; /&gt;</div><div class="line">                &lt;p&gt;父组件的内容：&#123;<span class="keyword">this</span>.state.value&#125;&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">            &lt;/</span>div&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在嵌套过深的父子组件中，这种单向的方式非常方便追踪数据问题等，而开发过程会相对麻烦一些。这在接下来的 CRUD 项目中把我绕的非常晕，而等到表单出问题的时候又让我立马体会到了其中的便利。</p>
<h4 id="3-生命周期"><a href="#3-生命周期" class="headerlink" title="3. 生命周期"></a>3. 生命周期</h4><p>react 的生命周期提供了更多的钩子，方便我们决定在哪里进行操作和定位等。这里通过一张不知来源的图作为参考。</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2017/03/09/%E4%BB%8E%E4%B8%80%E4%B8%AA%20CRUD%20%E4%B8%8A%E6%89%8B%20React%20%E5%92%8C%20AntD/React%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="React 生命周期"></p>
<h2 id="准备开发"><a href="#准备开发" class="headerlink" title="准备开发"></a>准备开发</h2><p>通过与已知知识的对比来学习新技术会帮助更好的上手，时间问题了解了大概核心的问题后基本上就可以开始项目了。在开始项目之前还需要大概了解下要使用的 UI 库，了解一下开发中可能用到的部分即可：布局、表单、表格、分页、按钮和通知等。</p>
<h3 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1. 搭建环境"></a>1. 搭建环境</h3><p>本文的环境以 <a href="https://github.com/cnzsb/react-antd-crud" target="_blank" rel="external">github</a> 上的仓库来介绍。实际开发时使用的是公司脚手架生成的包含 java 的环境，并在 tomacat 的服务器上进行的开发。</p>
<p>本次项目的重点是实践 react，因此环境部分的配置不过多介绍。我利用了官方脚手架 <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">creat-react-app</a> 生成文件目录。之后修改了生成目录为 docs，为了配合 github-pages 来显示；修改了 webpack 中 babel-loader 的配置来实现 antd 组件的按需加载。</p>
<h3 id="2-开发思路"><a href="#2-开发思路" class="headerlink" title="2. 开发思路"></a>2. 开发思路</h3><p>开发之前需要理清楚页面的层次结构和组件结构。 这里先把最后的项目目录放下来，然后来讲设计思路。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">|-- api</div><div class="line">|   |-- sqlData.js      <span class="comment"># 操作 sqlData 的 ajax 方法</span></div><div class="line">|-- components</div><div class="line">|   |-- App.jsx         <span class="comment"># 页面</span></div><div class="line">|   |-- Content.jsx     <span class="comment"># 页面主体内容区</span></div><div class="line">|   |-- Factory.jsx     <span class="comment"># 表单组件工厂</span></div><div class="line">|   |-- FormModal.jsx   <span class="comment"># 弹出的增加或编辑的表单组件</span></div><div class="line">|   |-- Search.jsx      <span class="comment"># 搜索组件</span></div><div class="line">|-- libs</div><div class="line">|   |-- ajax.js         <span class="comment"># ajax 实例及公共方法</span></div><div class="line">|   |-- util.js         <span class="comment"># 工具方法</span></div><div class="line">|-- store</div><div class="line">|   |-- sqlConfig.js    <span class="comment"># 数据库表单配置项</span></div><div class="line">|-- index.js            <span class="comment"># 入口文件</span></div><div class="line">|-- style.css           <span class="comment"># 样式文件</span></div></pre></td></tr></table></figure>
<p>首先项目需求中本来是存在多张表的，虽然因为种种原因仅只提供了一张表的获取接口，但是为了能够在有第 n 张表来的时候可以随意配置，因此我单独抽离了数据库配置文件，为了就是以后再有新需求可以“偷懒”少写代码。</p>
<p>在 <code>sqlConfig.js</code> 中我定义了每一个需要展示的 table header 的 <code>type</code>，从而按需渲染不同的表单类型，如 <code>input</code> 的 <code>text</code> 类型，或者仅做展示的 <code>display</code> 类型，以后还可以扩展 <code>date</code> 类型等。另外根据 antd 中的配置需要，增加了对应的比较重要的配置项，如 <code>width</code>。另外我也定义了 <code>validators</code> 来对每一项进行校验，实际项目中因为时间问题并没有完善此功能。</p>
<p>在有了思路后，就要去布局组件的位置，从而决定哪里最适合负责总的 state 管理，哪里又适合 props。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">|-- App</div><div class="line">|   |-- Menu                <span class="comment"># 导航菜单</span></div><div class="line">|   |-- Content             <span class="comment"># 主要内容区</span></div><div class="line">|       |-- Search          <span class="comment"># 搜索组件</span></div><div class="line">|           |-- Factory     <span class="comment"># 表单工厂</span></div><div class="line">|       |-- ButtonGroup     <span class="comment"># 操作按钮群</span></div><div class="line">|       |-- Table           <span class="comment"># 表格组件</span></div><div class="line">|           |-- Pagination  <span class="comment"># 分页组件</span></div><div class="line">|       |-- FormModal       <span class="comment"># 弹出的编辑表单</span></div><div class="line">|           |-- Factory     <span class="comment"># 表单工厂</span></div></pre></td></tr></table></figure>
<p>在最终的 react 组件中，按照重要程度，结构大致如上。我们通过下图来了解组件间具体如何通信。</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2017/03/09/%E4%BB%8E%E4%B8%80%E4%B8%AA%20CRUD%20%E4%B8%8A%E6%89%8B%20React%20%E5%92%8C%20AntD/react-antd-crud.png" alt="react-antd-crud"></p>
<p>基本的结构有了之后，接下来就是 ajax 具体如何使用了，这里我们使用了 axios，并对 ajax 进行一个全局的默认设置，把所有的错误都进行了同样的提示，这些设置保存在 <code>libs/ajax.js</code> 文件中。</p>
<h2 id="开发总结"><a href="#开发总结" class="headerlink" title="开发总结"></a>开发总结</h2><p>整个开发过程使用了三天时间。最难的第一个地方就是在接受 <code>props</code> 之后选择哪一个生命周期的钩子函数进行 <code>setState</code> 更新；第二个地方是组件之间各种状态传递的时候实在把我绕晕了，主要还是没有适应 react 的模式；第三个地方是在使用 antd 的 <code>table</code> 组件的 <code>rowSelection</code> 时，为了每一次都能让 <code>selectedRowKeys</code> 与组件对应 <code>state</code> 中的该值同步，需要把 <code>rowSelection</code> 的赋值操作放在 <code>render</code> 中，从而触发每一次组件更新的 <code>render</code> 方法。</p>
<p>除了缺点之外，本项目做到了抽离及复用组件，项目中的 <code>Factory</code> 组件可以根据配置文件生成对应类型的表单元素，进一步开发的话可以把 <code>validators</code> 的功能增加进去。对于编辑和新增表单这些验证规则可能和搜索组件 <code>Search</code> 中的不太一样，如果有要求的话，可以再定制维护一份对应搜索组件的 <code>Factory</code> 也是可以的。综上而言本项目在之后引入新的数据库表和对应的接口的话，配置相关的 <code>sqlConfig</code> 文件即能轻松实现复用。另外项目中简单的配置了 axios 的响应数据类型后的规则，做到了总的处理，具体的相关配置还需要参考<a href="https://github.com/mzabriskie/axios" target="_blank" rel="external">官方文档</a>。</p>
<p>综上，本篇文章侧重记录了项目的主要流程及思考方式，并没有详细解释 react 或者 antd 的相关知识，权当抛砖引玉，深入的内容还需要不断学习才能掌握，多看文档多实践。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;换了新公司后，技术栈使用的是 react。虽然一路从 vue 1 到 vue 2，但是我还是对 react 有好感的，当初学习 vue 1 文档少的可怜的时候也是借鉴了不少 react 的文章才得以理解，因此在接下来的文章中会小部分的对比下 react 和 vue 的不同。本次的文章主要是关于初次接触 react，并开发出一个具有 CRUD 功能页面的过程。提前了解本项目的详情请点击 &lt;a href=&quot;https://github.com/cnzsb/react-antd-crud&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub 地址&lt;/a&gt;和&lt;a href=&quot;http://www.zhaoshibo.net/react-antd-crud/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;线上预览地址&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="http://zhaoshibo.net/tags/React/"/>
    
      <category term="AntD" scheme="http://zhaoshibo.net/tags/AntD/"/>
    
  </entry>
  
  <entry>
    <title>添加多个 SSH 秘钥</title>
    <link href="http://zhaoshibo.net/blog/2017/02/28/%E6%B7%BB%E5%8A%A0%E5%A4%9A%E4%B8%AA%20SSH%20%E7%A7%98%E9%92%A5/"/>
    <id>http://zhaoshibo.net/blog/2017/02/28/添加多个 SSH 秘钥/</id>
    <published>2017-02-28T15:40:30.000Z</published>
    <updated>2017-03-06T10:04:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>本月堆积了好几篇文章没写了，趁着最后几十分钟，为了完成年初计划马虎更新一篇记录性的文章吧。由于本月刚换了新的公司，新公司的代码托管在 GitLab 上，因此有了管理 2 个 SSH 秘钥的需求，查阅资料后发现并不难，记录与分享一下。</p>
<p>首先生成 SSH 的指令不陌生：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"邮箱地址"</span></div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/your_user_directory/.ssh/id_rsa):</div></pre></td></tr></table></figure>
<p>默认会存放在个人文档根目录下的 <code>.ssh</code> 下，并以 <code>id_rsa</code> 的文件名生成秘钥对。<a id="more"></a>方便起见我没有修改已经存在的这两个配置文件。接下来的操作自然是再生成一份配置文件，但是注意选择保存的时候要改为其他名字防止覆盖已有文件，比如以 <code>id_rsa_other</code> 新命名。</p>
<p>接下来需要利用 <code>ssh-add</code> 相关命令添加对应的标识。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-add ~/.ssh/id_rsa_other</div><div class="line">ssh-add -L  <span class="comment"># 查看已生成的列表，用来确认是否添加成功</span></div></pre></td></tr></table></figure>
<p>最后还需要在 <code>.ssh</code> 文件夹下创建一份 <code>config</code> 配置文件，文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># github.com</span></div><div class="line">Host github.com</div><div class="line">        HostName github.com</div><div class="line">        User git</div><div class="line">        IdentityFile ~/.ssh/id_rsa</div><div class="line"><span class="comment"># gitlab.other.com</span></div><div class="line">Host gitlab.other.com</div><div class="line">        HostName gitlab.other.com</div><div class="line">        User git</div><div class="line">        IdentityFile ~/.ssh/id_rsa_other</div></pre></td></tr></table></figure>
<p>最最后，如果需要测试的话可以执行 <code>ssh -T &quot;git@HOST&quot;</code> 进行检验。但是一般公司内的服务器是不会给个人开通权限也就没办法利用这个指令测试了，不过可以尝试 <code>clone</code> 一个仓库来检测是否成功。</p>
<p>具体在开发时还需要记得在相应的仓库中重新配置 <code>git config</code> 对应的用户名及邮箱哦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本月堆积了好几篇文章没写了，趁着最后几十分钟，为了完成年初计划马虎更新一篇记录性的文章吧。由于本月刚换了新的公司，新公司的代码托管在 GitLab 上，因此有了管理 2 个 SSH 秘钥的需求，查阅资料后发现并不难，记录与分享一下。&lt;/p&gt;
&lt;p&gt;首先生成 SSH 的指令不陌生：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ssh-keygen -t rsa -C &lt;span class=&quot;string&quot;&gt;&quot;邮箱地址&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Generating public/private rsa key pair.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Enter file &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认会存放在个人文档根目录下的 &lt;code&gt;.ssh&lt;/code&gt; 下，并以 &lt;code&gt;id_rsa&lt;/code&gt; 的文件名生成秘钥对。
    
    </summary>
    
    
      <category term="Git" scheme="http://zhaoshibo.net/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Plus —— JS 面试题</title>
    <link href="http://zhaoshibo.net/blog/2017/02/06/Plus%20%E2%80%94%E2%80%94%20JS%20%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://zhaoshibo.net/blog/2017/02/06/Plus —— JS 面试题/</id>
    <published>2017-02-06T08:16:59.000Z</published>
    <updated>2017-02-06T08:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>设计一个 plus 方法，达到以下测试结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>)</div><div class="line">describe(<span class="string">'闭包应用'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  it(<span class="string">'plus(0) === 0'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    assert.equal(<span class="number">0</span>, plus(<span class="number">0</span>).toString())</div><div class="line">  &#125;)</div><div class="line">  it(<span class="string">'plus(1)(1)(2)(3)(5) === 12'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    assert.equal(<span class="number">12</span>, plus(<span class="number">1</span>)(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">5</span>).toString())</div><div class="line">  &#125;)</div><div class="line">  it(<span class="string">'plus(1)(4)(2)(3) === 10'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    assert.equal(<span class="number">10</span>,plus(<span class="number">1</span>)(<span class="number">4</span>)(<span class="number">2</span>)(<span class="number">3</span>).toString())</div><div class="line">  &#125;)</div><div class="line">  it(<span class="string">'方法引用'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> plus2 = plus(<span class="number">1</span>)(<span class="number">1</span>)</div><div class="line">    assert.equal(<span class="number">12</span>, plus2(<span class="number">1</span>)(<span class="number">4</span>)(<span class="number">2</span>)(<span class="number">3</span>).toString())</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</blockquote>
<a id="more"></a>
<p>看到本题，首先就会发现正常的函数操作只是暂时存储了所有参数，而 toString 方法才是用来真正的执行方法，因此在默认的行为中只需要利用闭包来存储数据即可，并不难理解。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="comment">// 方法 1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">plusA</span>(<span class="params">...num</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> args = []</div><div class="line">  args.push(...num)</div><div class="line">  <span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">...n</span>) </span>&#123;</div><div class="line">    args.push(...n)</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  sum.toString = <span class="function"><span class="params">()</span> =&gt;</span> args.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b)</div><div class="line">  <span class="keyword">return</span> sum</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'方法一测试结果：'</span>)</div><div class="line">test(plusA)</div><div class="line"></div><div class="line"><span class="comment">// 方法 2，内部通过柯里化来实现</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">plusB</span>(<span class="params">...num</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> args = []</div><div class="line">    <span class="keyword">var</span> save = <span class="function"><span class="keyword">function</span> (<span class="params">...n</span>) </span>&#123;</div><div class="line">      args.push(...n)</div><div class="line">      <span class="keyword">return</span> save</div><div class="line">    &#125;</div><div class="line">    save.toString = <span class="function"><span class="params">()</span> =&gt;</span> args.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b)</div><div class="line">    <span class="keyword">return</span> save</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> sum()(...num)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'方法二测试结果：'</span>)</div><div class="line">test(plusB)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">plus</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(plus(<span class="number">0</span>, <span class="number">1</span>).toString())</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">12</span> === plus(<span class="number">1</span>)(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">5</span>).toString())</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">10</span> === plus(<span class="number">1</span>)(<span class="number">4</span>)(<span class="number">2</span>)(<span class="number">3</span>).toString())</div><div class="line">  <span class="keyword">var</span> plus2 = plus(<span class="number">1</span>)(<span class="number">1</span>)</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">12</span> === plus2(<span class="number">1</span>)(<span class="number">4</span>)(<span class="number">2</span>)(<span class="number">3</span>).toString())</div><div class="line">  </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'多参数执行, plus(1, 2)(3, 4): '</span>, plus(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>, <span class="number">4</span>).toString())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;设计一个 plus 方法，达到以下测试结果。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; assert = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;assert&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;describe(&lt;span class=&quot;string&quot;&gt;&#39;闭包应用&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  it(&lt;span class=&quot;string&quot;&gt;&#39;plus(0) === 0&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert.equal(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, plus(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).toString())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  it(&lt;span class=&quot;string&quot;&gt;&#39;plus(1)(1)(2)(3)(5) === 12&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert.equal(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, plus(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;).toString())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  it(&lt;span class=&quot;string&quot;&gt;&#39;plus(1)(4)(2)(3) === 10&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert.equal(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,plus(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).toString())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  it(&lt;span class=&quot;string&quot;&gt;&#39;方法引用&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; plus2 = plus(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    assert.equal(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, plus2(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).toString())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhaoshibo.net/tags/JavaScript/"/>
    
      <category term="面试题" scheme="http://zhaoshibo.net/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>LazyMan —— JS 面试题</title>
    <link href="http://zhaoshibo.net/blog/2017/01/24/LazyMan%20%E2%80%94%E2%80%94%20JS%20%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://zhaoshibo.net/blog/2017/01/24/LazyMan —— JS 面试题/</id>
    <published>2017-01-24T09:27:43.000Z</published>
    <updated>2017-02-06T08:12:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>实现一个LazyMan，可以按照以下方式调用：</p>
<p>LazyMan(“Hank”)</p>
<p>输出：Hi! This is Hank!</p>
<p>LazyMan(“Hank”).sleep(10).eat(“dinner”)</p>
<p>输出: Hi! This is Hank!</p>
<a id="more"></a>
<p>等待10秒..</p>
<p>Wake up after 10</p>
<p>Eat dinner~</p>
<p>LazyMan(“Hank”).eat(“dinner”).eat(“supper”)</p>
<p>输出：Hi This is Hank!</p>
<p>Eat dinner~</p>
<p>Eat supper~</p>
<p>LazyMan(“Hank”).sleepFirst(5).eat(“supper”)</p>
<p>输出：等待5秒</p>
<p>Wake up after 5</p>
<p>Hi This is Hank!</p>
<p>Eat supper</p>
<p>以此类推。</p>
</blockquote>
<p>本题考察了典型的先进先出的队列结构，因此可以使用一个数组 queue 来存取要操作的方法，然后利用 js 的定时器来处理事件循环，并且在每次触发事件后返回自身达到链式调用，在构造函数中需要注意的是作用域的变更，在适当的地方使用 self 或者闭包来解决这个问题。<a href="http://codepen.io/cnzsb/pen/RKpKgZ/" target="_blank" rel="external">具体的答案如下所示</a>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_LazyMan</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.queue = []</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> fn = (<span class="function"><span class="keyword">function</span> (<span class="params">that</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`Hi! This is <span class="subst">$&#123;name&#125;</span>!`</span>)</div><div class="line">      that.next()</div><div class="line">    &#125;</div><div class="line">  &#125;)(<span class="keyword">this</span>)</div><div class="line">  <span class="keyword">this</span>.queue.push(fn)</div><div class="line">  </div><div class="line">  <span class="comment">// 下一个事件循环执行</span></div><div class="line">  setTimeout(<span class="keyword">this</span>.next.bind(<span class="keyword">this</span>), <span class="number">0</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实现事件循环,在某个事件完成时重新调用 next 方法</span></div><div class="line">_LazyMan.prototype.next = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> fn = <span class="keyword">this</span>.queue.shift()</div><div class="line">  fn &amp;&amp; fn()</div><div class="line">&#125;</div><div class="line"></div><div class="line">_LazyMan.prototype.sleep = <span class="function"><span class="keyword">function</span> (<span class="params">time</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> fn = (<span class="function"><span class="keyword">function</span> (<span class="params">that</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`Wake up after <span class="subst">$&#123;time&#125;</span>`</span>)</div><div class="line">        that.next()</div><div class="line">      &#125;, time * <span class="number">1000</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;)(<span class="keyword">this</span>)</div><div class="line">  <span class="keyword">this</span>.queue.push(fn)</div><div class="line">  <span class="comment">// 链式调用</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">_LazyMan.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> fn = (<span class="function"><span class="keyword">function</span> (<span class="params">that</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`Eat <span class="subst">$&#123;food&#125;</span>~`</span>)</div><div class="line">      that.next()</div><div class="line">    &#125;</div><div class="line">  &#125;)(<span class="keyword">this</span>)</div><div class="line">  <span class="keyword">this</span>.queue.push(fn)</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">_LazyMan.prototype.sleepFirst = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> fn = (<span class="function"><span class="keyword">function</span> (<span class="params">that</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`Wake up after <span class="subst">$&#123;time&#125;</span>`</span>)</div><div class="line">      that.next()</div><div class="line">    &#125;, time * <span class="number">1000</span>)</div><div class="line">  &#125;)(<span class="keyword">this</span>)</div><div class="line">  <span class="keyword">this</span>.queue.unshift(fn)</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> LazyMan = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> _LazyMan(name)</div><div class="line">&#125;</div><div class="line"></div><div class="line">LazyMan(<span class="string">'Hank1'</span>).sleep(<span class="number">10</span>).eat(<span class="string">'dinner'</span>)</div><div class="line"><span class="comment">// LazyMan('Hank2').eat('dinner').eat('supper')</span></div><div class="line"><span class="comment">// LazyMan('Hank3').sleepFirst(5).eat('supper')</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;实现一个LazyMan，可以按照以下方式调用：&lt;/p&gt;
&lt;p&gt;LazyMan(“Hank”)&lt;/p&gt;
&lt;p&gt;输出：Hi! This is Hank!&lt;/p&gt;
&lt;p&gt;LazyMan(“Hank”).sleep(10).eat(“dinner”)&lt;/p&gt;
&lt;p&gt;输出: Hi! This is Hank!&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhaoshibo.net/tags/JavaScript/"/>
    
      <category term="面试题" scheme="http://zhaoshibo.net/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>多栏布局</title>
    <link href="http://zhaoshibo.net/blog/2017/01/18/%E5%A4%9A%E6%A0%8F%E5%B8%83%E5%B1%80/"/>
    <id>http://zhaoshibo.net/blog/2017/01/18/多栏布局/</id>
    <published>2017-01-18T12:57:42.000Z</published>
    <updated>2017-01-18T13:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在很少接触到太多的 CSS 问题了，多数情况下 flex 都是最佳的选择，慢慢也就对基础生疏了，今天来总结下常见的布局问题。示例中关于 flex 的布局都比较简单，不理解的需要重新补习 <a href="/blog/2016/05/04/flex布局/">flex</a> 基础。本文中的示例和代码都在 <a href="http://codepen.io" target="_blank" rel="external">codepen</a> 上，如果加载异常请先科学上网。</p>
<p>具有固定宽高的布局方式在实际需求中其实很少见，一般都会有自适应的区域，接下来就来看看常用的几种布局。</p>
<a id="more"></a>
<h2 id="两栏布局"><a href="#两栏布局" class="headerlink" title="两栏布局"></a>两栏布局</h2><p>常见的两栏布局一般是左侧固定，右侧自适应。</p>
<ol>
<li><p>float</p>
<iframe height="162" scrolling="no" title="两栏布局 - float" src="http://codepen.io/cnzsb/embed/XpXxKj/?height=162&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/cnzsb/pen/XpXxKj/" target="_blank" rel="external">两栏布局 - float</a> by Shibo Zhao (<a href="http://codepen.io/cnzsb" target="_blank" rel="external">@cnzsb</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>
</li>
<li><p>position</p>
<iframe height="183" scrolling="no" title="两栏布局 - position" src="http://codepen.io/cnzsb/embed/xgZyXX/?height=183&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/cnzsb/pen/xgZyXX/" target="_blank" rel="external">两栏布局 - position</a> by Shibo Zhao (<a href="http://codepen.io/cnzsb" target="_blank" rel="external">@cnzsb</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>
</li>
<li><p>table-cell</p>
<iframe height="179" scrolling="no" title="两栏布局 - table-cell" src="http://codepen.io/cnzsb/embed/OWXJaM/?height=179&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/cnzsb/pen/OWXJaM/" target="_blank" rel="external">两栏布局 - table-cell</a> by Shibo Zhao (<a href="http://codepen.io/cnzsb" target="_blank" rel="external">@cnzsb</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>
</li>
<li><p>flex</p>
<iframe height="227" scrolling="no" title="两侧定宽，中间自适应 - flex" src="http://codepen.io/cnzsb/embed/dNMZWa/?height=227&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/cnzsb/pen/dNMZWa/" target="_blank" rel="external">两侧定宽，中间自适应 - flex</a> by Shibo Zhao (<a href="http://codepen.io/cnzsb" target="_blank" rel="external">@cnzsb</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

</li>
</ol>
<h2 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h2><p>简单的三栏布局可以拆分成两栏布局嵌套两栏布局的方式设计，在此基础上如果拆分为中间元素和两侧元素的话，则需要真正的三栏布局来设计了。</p>
<p>首先是左右固定，中间自适应的布局。</p>
<ol>
<li><p>float</p>
<iframe height="201" scrolling="no" title="两侧定宽，中间自适应 - float" src="http://codepen.io/cnzsb/embed/GroYQz/?height=201&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/cnzsb/pen/GroYQz/" target="_blank" rel="external">两侧定宽，中间自适应 - float</a> by Shibo Zhao (<a href="http://codepen.io/cnzsb" target="_blank" rel="external">@cnzsb</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>
</li>
<li><p>float + margin 负值，两栏布局也可以采用这种方法</p>
<iframe height="257" scrolling="no" title="两侧定宽，中间自适应 - float + margin 负值" src="http://codepen.io/cnzsb/embed/ygeQMz/?height=257&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/cnzsb/pen/ygeQMz/" target="_blank" rel="external">两侧定宽，中间自适应 - float + margin 负值</a> by Shibo Zhao (<a href="http://codepen.io/cnzsb" target="_blank" rel="external">@cnzsb</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>
</li>
<li><p>position</p>
<iframe height="246" scrolling="no" title="两侧定宽，中间自适应 - position" src="http://codepen.io/cnzsb/embed/dNGgxw/?height=246&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/cnzsb/pen/dNGgxw/" target="_blank" rel="external">两侧定宽，中间自适应 - position</a> by Shibo Zhao (<a href="http://codepen.io/cnzsb" target="_blank" rel="external">@cnzsb</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>
</li>
<li><p>flex</p>
<iframe height="232" scrolling="no" title="两侧定宽，中间自适应 - flex" src="http://codepen.io/cnzsb/embed/dNMZWa/?height=232&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/cnzsb/pen/dNMZWa/" target="_blank" rel="external">两侧定宽，中间自适应 - flex</a> by Shibo Zhao (<a href="http://codepen.io/cnzsb" target="_blank" rel="external">@cnzsb</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

</li>
</ol>
<p>另一种是中间定宽，两侧自适应的布局。这个情况需要在固定中间元素的前提下，使左右两侧浮动或者绝对定位即可，下例使用 float 做了演示，同上述例子类似，float 的元素也可以使用 position 进行绝对定位替换，这里不再演示。</p>
<iframe height="268" scrolling="no" title="中间定宽，两侧自适应 - float + position" src="http://codepen.io/cnzsb/embed/oBLjGQ/?height=268&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/cnzsb/pen/oBLjGQ/" target="_blank" rel="external">中间定宽，两侧自适应 - float + position</a> by Shibo Zhao (<a href="http://codepen.io/cnzsb" target="_blank" rel="external">@cnzsb</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h2 id="等高布局"><a href="#等高布局" class="headerlink" title="等高布局"></a>等高布局</h2><p>等高布局是一种要求各栏背景颜色填充至等高的样式。</p>
<ol>
<li><p>两栏等高</p>
<iframe height="189" scrolling="no" title="两栏等高布局" src="http://codepen.io/cnzsb/embed/BpQZNq/?height=189&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/cnzsb/pen/BpQZNq/" target="_blank" rel="external">两栏等高布局</a> by Shibo Zhao (<a href="http://codepen.io/cnzsb" target="_blank" rel="external">@cnzsb</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>
</li>
<li><p>三栏等高</p>
<iframe height="320" scrolling="no" title="三栏等高布局" src="http://codepen.io/cnzsb/embed/OWbjyJ/?height=320&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/cnzsb/pen/OWbjyJ/" target="_blank" rel="external">三栏等高布局</a> by Shibo Zhao (<a href="http://codepen.io/cnzsb" target="_blank" rel="external">@cnzsb</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

</li>
</ol>
<p>以上布局如果需要流式布局，宽度替换为百分比即可。关于三栏等高布局，根据上例下图能帮助很好的理解。其中主要利用了相对定位的方式，2 层容器的 right 距离为第三栏（最右栏）元素的宽度，3 层容器的 right 距离为第二栏（中间栏）的宽度；对于子栏目来讲，它们的 left 距离均为除了第一栏（最左栏）的宽度之和。理解了原理之后，根据需要，扩展更多的子栏也可以运用同样的方式。</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2017/01/18/%E5%A4%9A%E6%A0%8F%E5%B8%83%E5%B1%80/%E4%B8%89%E6%A0%8F%E7%AD%89%E9%AB%98%E5%B8%83%E5%B1%80%E5%9B%BE%E8%A7%A3.png" alt="三栏等高布局图解"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文仅仅展示了几种常见的布局结构以及对应的常用方法，自适应的布局在页面重构中很经常遇到，需要加强更多的响应式知识才能熟练。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://www.cnblogs.com/jununx/p/3336553.html" target="_blank" rel="external">两栏布局，三栏布局，等高布局，流式布局</a></li>
<li><a href="https://www.w3cplus.com/css/creaet-equal-height-columns" target="_blank" rel="external">八种创建等高列布局</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在很少接触到太多的 CSS 问题了，多数情况下 flex 都是最佳的选择，慢慢也就对基础生疏了，今天来总结下常见的布局问题。示例中关于 flex 的布局都比较简单，不理解的需要重新补习 &lt;a href=&quot;/blog/2016/05/04/flex布局/&quot;&gt;flex&lt;/a&gt; 基础。本文中的示例和代码都在 &lt;a href=&quot;http://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;codepen&lt;/a&gt; 上，如果加载异常请先科学上网。&lt;/p&gt;
&lt;p&gt;具有固定宽高的布局方式在实际需求中其实很少见，一般都会有自适应的区域，接下来就来看看常用的几种布局。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://zhaoshibo.net/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>2016 年终总结</title>
    <link href="http://zhaoshibo.net/blog/2017/01/05/2016%20%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://zhaoshibo.net/blog/2017/01/05/2016 年终总结/</id>
    <published>2017-01-05T10:09:23.000Z</published>
    <updated>2017-01-05T13:27:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>又到了新的一年，总结一下过去的 2016 。翻看年初所定的目标，虽说有些没有很好的完成，然而还是觉得能给这一年打 80 分。此时我刚刚踏入前端一年半，真正参加工程化的项目不足一年，但恰恰是今年让我系统的理解了前端，对工作也更加游刃有余。</p>
<a id="more"></a>
<h2 id="上半年"><a href="#上半年" class="headerlink" title="上半年"></a>上半年</h2><p>本来这里已经洋洋洒洒几千字的总结了，然而总觉得我似乎写成了简历一样，太不像一篇合格的总结，于是我决定从头开始写。😂</p>
<p>2016 的上半年我依然呆在我的第一份前端工作的公司，做着最普通的切图仔的任务。不甘平庸的同时自学了很多进阶知识，然而没有大型项目，也没有很好的技术栈实践，最终导致只是有一大堆知识拥堵在我的脑中。没有成型的项目实践，因此带来了很多困惑，诸如为什么会有闭包导致的事件绑定失败，slice 、substr 和 substring 永远分不清，以及到底什么是 DOM 等等。所有这些东西都只能靠着自己的感觉来掌握，效率低下。最终为了更好的发展我还是选择了跳槽，好来快点结束这样的状态。</p>
<p>跳槽的过程中，最深刻的是在<em>野兽派</em>的面试，被邀请的当天我本来已经不再想继续面试了，只是看了他们的简介后想着就当聊天了（原谅我当时不知道他们是一家很知名的鲜花公司）。面试过程中基本上没有聊什么无聊的话题，直奔主题的提问了几道问题：</p>
<blockquote>
<ol>
<li>移动端的 viewport 中，initial-scale 为 1 的时候，16px 的文字会显示多大；如果一个 PC 16px 的文字想要在移动端显示为 32px ，应该如何设置这个值。</li>
<li>ES6 中的 super 的含义。</li>
<li>如果有一个表单，如何设计为可复用的组件。</li>
</ol>
</blockquote>
<p>可能还有几个小知识点我漏掉了，但是这些问题真的很经典，然而当时的我没有很好的掌握移动端的细节知识，ES6 还没有看过，面向对象等 JS 进阶知识一塌糊涂，只会方法式编程。这几道题的考查点都是能看出应聘者是否在平时对知识点有足够的思考，而不是拿来主义的直接使用网上的解决方案（如直接的复制 viewport 的 meta），二是对 JS 基础掌握的考察。之所以印象深刻，倒也不是这几道不同其他公司的面试题，而是过程中面试官对我频频引导，希望能看到我的成长潜力，我是真的有心无力，毕竟没有实践只会导致不成体系的知识。正是这一份宝贵的面试经验，在接下来就要到来的工作中给了我巨大的影响。</p>
<h2 id="下半年"><a href="#下半年" class="headerlink" title="下半年"></a>下半年</h2><p>下班年在新的公司给我带来了巨大的提升，毕竟终于接触到系统化的工程了，我真的是天天都激动的不行。</p>
<p>一开始就是 Vue 配合 ES6 的项目，对于一个只会 jQuery 的我来说，读文档就吃力的不行，然而此时上文中所述的那一大坨积聚在我脑中的知识体随着新知识的注入开始慢慢的消化了，Dom 操作和面向数据的 MVVM ，事件和通信，Vue 实例对象以及原型等等，开始让这些知识体如游戏中的经验般让我频频有顿悟升级的感觉，那种舒爽简直觉得毒品也不过如此了🙃。随着项目的深入，我的知识体系也开始完善起来，至此我才终于觉得我入了前端的门了。</p>
<p>回顾后半年，先后经历了 Vue1 全家桶项目，微信项目，Weex App 项目，Vue2 全家桶项目等，这些项目经验配合书本等渠道获得的知识，前端的道路走的越来越宽。</p>
<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>用一个字形容 2016 ，就是<strong>升</strong>，技能、工作、生活等等全都有质的提升。随着技能的熟练掌握，工作和生活都开始趋于平静，慢慢也就想钻进舒适区不愿跳出了，是时候重新确立些目标了：</p>
<ul>
<li>2016 读的书都很有质量，然而却没有做好读书笔记，项目中碰到的知识点等也没有梳理成笔记，希望 2017 年能认真的记笔记，争取每周产出一篇，至少每月 2 篇</li>
<li>至少 12 本技术书籍</li>
<li>Github 完成至少一个完整的前端项目，希望后期能增加 Node 的后端工程</li>
</ul>
<p>2017 继续进步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又到了新的一年，总结一下过去的 2016 。翻看年初所定的目标，虽说有些没有很好的完成，然而还是觉得能给这一年打 80 分。此时我刚刚踏入前端一年半，真正参加工程化的项目不足一年，但恰恰是今年让我系统的理解了前端，对工作也更加游刃有余。&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="http://zhaoshibo.net/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>理解 JavaScipt new 操作符</title>
    <link href="http://zhaoshibo.net/blog/2016/10/19/%E7%90%86%E8%A7%A3%20JavaScipt%20new%20%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>http://zhaoshibo.net/blog/2016/10/19/理解 JavaScipt new 操作符/</id>
    <published>2016-10-19T10:10:53.000Z</published>
    <updated>2016-10-31T12:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在《JavaScript 高级程序设计》中提到使用 <code>new</code> 操作符会经历 4 个步骤：</p>
<blockquote>
<p>(1) 创建一个新对象；</p>
<p>(2) 将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）；</p>
<p>(3) 执行构造函数中的代码（为这个新对象添加属性）；</p>
<p>(4) 返回新对象。</p>
</blockquote>
<a id="more"></a>
<p>假设我们有一个构造函数 <code>Foo</code> 。这里要理解在创建了一个新函数时，就会根据一组特定的规则为该函数创建一个 <code>prototype</code> 属性，这个属性指向函数的原型对象。而在默认情况下，所有原型对象都会自动获得一个 <code>constructor</code> 属性，这个属性包含一个指向 <code>prototype</code> 属性所在函数的指针。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后通过 <code>new</code> 方法创建实例 <code>bar</code>。我们知道，当调用构造函数创建一个新实例后，该实例的内部将包含一个指针指向构造函数的原型对象。ECMA-262 第 5 版管这个指针叫 <code>[[Prototype]]</code> ，但Firefox、Chrome、Safari在每个对象上都支持一个属性 <code>__proto__</code> ，也就相当于这个属性。重要理解的是<strong>这个连接存在于实例与构造函数的原型对象之间，而不是存在于实例与构造函数之间</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> Foo(<span class="string">'bar'</span>)</div><div class="line"><span class="built_in">console</span>.log(bar)    <span class="comment">// Foo &#123;name: "bar"&#125;</span></div><div class="line">bar.getName()   <span class="comment">// bar</span></div></pre></td></tr></table></figure>
<p>现在根据以上的规则，我们手动来实现一个 <code>new</code> 的过程。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 首先创建一个空对象</span></div><div class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> <span class="built_in">Object</span>()</div><div class="line"></div><div class="line"><span class="comment">// 2. 把这个对象的 [[Prototype]] （__proto__）指向 Foo 的 prototype</span></div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(baz, Foo.prototype)</div><div class="line"><span class="comment">// 在控制台中也可以这样写：</span></div><div class="line"><span class="comment">// baz.__proto__ = Foo.prototype</span></div><div class="line"></div><div class="line"><span class="comment">// 3. 传递 FOO 的属性及作用域</span></div><div class="line">Foo.call(baz, <span class="string">'baz'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 4. 验证</span></div><div class="line">baz.getName()   <span class="comment">// baz</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在《JavaScript 高级程序设计》中提到使用 &lt;code&gt;new&lt;/code&gt; 操作符会经历 4 个步骤：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(1) 创建一个新对象；&lt;/p&gt;
&lt;p&gt;(2) 将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）；&lt;/p&gt;
&lt;p&gt;(3) 执行构造函数中的代码（为这个新对象添加属性）；&lt;/p&gt;
&lt;p&gt;(4) 返回新对象。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhaoshibo.net/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery FormData 的 Ajax 提交</title>
    <link href="http://zhaoshibo.net/blog/2016/08/30/jQuery%20FormData%20%E7%9A%84%20Ajax%20%E6%8F%90%E4%BA%A4/"/>
    <id>http://zhaoshibo.net/blog/2016/08/30/jQuery FormData 的 Ajax 提交/</id>
    <published>2016-08-30T14:36:48.000Z</published>
    <updated>2016-10-31T12:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>前些天恰好遇到用 jQuery 提交一个上传的文件一直出错，这里记录一下原因。</p>
<p>我们的项目本身是使用了 vue 的，但是历史原因同时也保留了 jQuery ，然后项目中用 Promise 重新封装了 jQuery 的 Ajax 方法。之前有一个共用的 upload 的上传组件，里面使用了原生 XHR ，没有遇到上传文件的问题，但是我在使用 jQuery 的 Ajax 时却怎么都办法上传，检查发现是 <code>content-type</code> 导致的问题。</p>
<a id="more"></a>
<p>仔细查看 jQuery 的 API 文档才发现原来它默认 <code>contentType</code> 为 <code>application/x-www-form-urlencoded</code> ，这显然不是 <code>FormData</code> 的类型。同时 <code>processData</code> 为了配合默认的 <code>contentType</code> 类型，也会把需要发送的 <code>data</code> 对象转为一个查询字符串。因此在发送一个 <code>FormData</code> 类型的数据时，应该这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    type: <span class="string">'post'</span>,</div><div class="line">    url: <span class="string">'/api/upload'</span>,</div><div class="line">    contentType: <span class="literal">false</span>,</div><div class="line">    processData: <span class="literal">false</span>,</div><div class="line">    data: FormData,</div><div class="line">    success: handleResponse</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前些天恰好遇到用 jQuery 提交一个上传的文件一直出错，这里记录一下原因。&lt;/p&gt;
&lt;p&gt;我们的项目本身是使用了 vue 的，但是历史原因同时也保留了 jQuery ，然后项目中用 Promise 重新封装了 jQuery 的 Ajax 方法。之前有一个共用的 upload 的上传组件，里面使用了原生 XHR ，没有遇到上传文件的问题，但是我在使用 jQuery 的 Ajax 时却怎么都办法上传，检查发现是 &lt;code&gt;content-type&lt;/code&gt; 导致的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://zhaoshibo.net/tags/Tips/"/>
    
      <category term="jQuery" scheme="http://zhaoshibo.net/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 图片预览</title>
    <link href="http://zhaoshibo.net/blog/2016/08/29/HTML5%20%E5%9B%BE%E7%89%87%E9%A2%84%E8%A7%88/"/>
    <id>http://zhaoshibo.net/blog/2016/08/29/HTML5 图片预览/</id>
    <published>2016-08-29T14:43:12.000Z</published>
    <updated>2016-10-31T12:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在没有 HTML5 之前，前端的图片预览都是在用户选择图片后就发 Ajax 到服务端，然后由服务端再把图片的 URL 返还给前端来完成的。有了 HTML5 后，在 IE10 以上及代浏览器的版本中我们便无须发请求获得 URL 来完成预览了。这些将依靠 <code>FileReader</code> 来实现。</p>
<a id="more"></a>
<p>我们直接来实现一个 demo，可以点击尝试一下。</p>
<p><input id="file" type="file" accept="image/jpg, image/jpeg, image/png, image/gif"></p>
<div id="preview"></div>

<script>
var file = document.getElementById('file'),
    preview = document.getElementById('preview');
file.addEventListener('change', function(e) {
    var file = e.target.files[0],
        fr = new FileReader();
    fr.onload = function(e) {
        var img = e.target.result;
        preview.innerHTML = '<img src="' + img + '" width="200" height="200">';
    };
    fr.readAsDataURL(file);
}, false);
</script>


<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/jpg, image/jpeg, image/png, image/gif"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"preview"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">'file'</span>),</span></div><div class="line"><span class="javascript">    preview = <span class="built_in">document</span>.getElementById(<span class="string">'preview'</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">file.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> file = e.target.files[<span class="number">0</span>],</span></div><div class="line"><span class="actionscript">        fr = <span class="keyword">new</span> FileReader();</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">    fr.onload = <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></div><div class="line"><span class="undefined">        preview.src = e.target.result;</span></div><div class="line"><span class="actionscript">        preview.style.display = <span class="string">'block'</span>;</span></div><div class="line"><span class="undefined">    &#125;;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">    fr.readAsDataURL(file);</span></div><div class="line"><span class="actionscript">&#125;, <span class="literal">false</span>);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们用 <code>FileReader</code> 的一个实例利用方法 <code>readAsDataURL</code> 读取了上传的文件，并且我们事先设置了在读取即 <code>onload</code> 时，触发了视图更新。</p>
<p><code>FileReader</code> 的这个特性，主要是把上传的图片给转化为了 <code>base64</code> 的格式，因此实现了预览。其实它还可以读取 <code>Blob</code> 和 <code>File</code> 等文件，具体的方法可以看<a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader" target="_blank" rel="external">这里</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在没有 HTML5 之前，前端的图片预览都是在用户选择图片后就发 Ajax 到服务端，然后由服务端再把图片的 URL 返还给前端来完成的。有了 HTML5 后，在 IE10 以上及代浏览器的版本中我们便无须发请求获得 URL 来完成预览了。这些将依靠 &lt;code&gt;FileReader&lt;/code&gt; 来实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTML5" scheme="http://zhaoshibo.net/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 的复制操作</title>
    <link href="http://zhaoshibo.net/blog/2016/08/17/Javascript%20%E7%9A%84%E5%A4%8D%E5%88%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://zhaoshibo.net/blog/2016/08/17/Javascript 的复制操作/</id>
    <published>2016-08-17T15:47:46.000Z</published>
    <updated>2017-04-24T10:47:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于点击按钮就能复制一个链接或其他内容的操作，在很多网站都会有用到。使用原生的js方法 <code>document.execCommand</code> 即可实现，它能够对<strong>可以编辑的文档对象（设置contentEditable等）</strong>进行操作。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>它的基本语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool = document.execCommand(aCommandName, aShowDefaultUI, aValueArgument)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>接受三个参数，并返回一个 <code>Boolean</code>，如果是 <code>false</code> 则表示操作不被支持或未被启用。</p>
<p>第一个参数是一个 <code>DOMString</code>，即为用到的命令名称，如 <code>copy</code>、<code>cut</code> 等，具体的实现因浏览器而异，目前多数的浏览器都能支持，可以<a href="http://codepen.io/netsi1964/full/QbLLGW/" target="_blank" rel="external"><strong>点此预览</strong></a>这些指令并检测当前浏览器是否支持。</p>
<p>第二个参数是一个 <code>Boolean</code> 是否展示用户界面，一般为 <code>false</code>。Mozilla 没有实现。实际使用中并未用到。</p>
<p>第三个参数是某些命令需要的一些额外参数值（如 insertimage 需要提供这个 image 的 url）。默认为 <code>null。</code>实际使用中也为用到。</p>
<h2 id="实现复制功能"><a href="#实现复制功能" class="headerlink" title="实现复制功能"></a>实现复制功能</h2><p>对于一个页面中已经存在的 <code>input</code> 元素来讲，我们只需要直接对调用即可实现。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设页面存在以下元素</span></div><div class="line"><span class="comment">// &lt;input id="copy" type="text" value="copy command"&gt;</span></div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'copy'</span>).select()</div><div class="line"><span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>)</div></pre></td></tr></table></figure>
<p>以上便把 “copy command” 这个内容复制到了剪切板内。对于这样的功能实现并不复杂，实际业务场景中若遇到点击一个叫做“复制链接”的按钮就直接复制到剪切板上，这就让人头疼了。我们很容易想到利用一下代码实现。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> input = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>)</div><div class="line">input.type = <span class="string">'text'</span></div><div class="line">input.value = someData	<span class="comment">// 一些数据</span></div><div class="line">input.select()</div><div class="line"><span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>)</div><div class="line">input.blur()</div></pre></td></tr></table></figure>
<p>然而现实运行后却发现并没有成功。后来反复试验发现对于任何一个不可见的元素： <code>display: none</code>、<code>type=&quot;hidden&quot;</code>、<code>width: 0； height: 0</code> 等，该指令均无效。回头仔细研究基本语法，发现<strong>可编辑的文档对象</strong>似乎有什么猫腻，假设一个元素无法看见，或者无法点击，那么确实好像没办法<strong>直接编辑</strong>，所以这就是没有成功的原因了。但是非要实现这样一个功能怎么办呢，思前想后不妨试试 <code>opacity: 0</code>，这下竟然成功了。因此为了不影响UI的前提下可以这样实现功能。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"copyBtn"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>复制链接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'copyBtn'</span>)</span></div><div class="line"><span class="actionscript">    .addEventListener(<span class="string">'click'</span>, (e) =&gt; &#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">const</span> _target = e.target</span></div><div class="line"><span class="javascript">        <span class="keyword">let</span> input = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>)</span></div><div class="line"><span class="actionscript">        input.type = <span class="string">'text'</span></span></div><div class="line"><span class="actionscript">        input.className = <span class="string">'copy-text'</span>   <span class="comment">// 利用 class 设置样式</span></span></div><div class="line"><span class="actionscript">        input.value = someData          <span class="comment">// 一些数据</span></span></div><div class="line"><span class="undefined">        </span></div><div class="line"><span class="actionscript">        <span class="keyword">const</span> _i = _target.appendChild(input) <span class="comment">// 暂时添加进 button 节点中了，也可以放在其他地方</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        _i.select()</span></div><div class="line"><span class="javascript">        <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        _target.removeChild(_i)</span></div><div class="line"><span class="actionscript">        input = <span class="literal">null</span></span></div><div class="line"><span class="actionscript">    &#125;, <span class="literal">false</span>)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/scss"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-id">#copy-btn</span> &#123;</span></div><div class="line"><span class="undefined">    position: relative;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.copy-text</span> &#123;</span></div><div class="line"><span class="undefined">        position: absolute; // 脱离文档流，防止对 UI 影响</span></div><div class="line"><span class="undefined">        width: 1px;         // 没啥大用，强迫症：）</span></div><div class="line"><span class="undefined">        height: 1px;        // 没啥大用，强迫症：）</span></div><div class="line"><span class="undefined">        opacity: 0;         // 重点</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上便完成了直接点击按钮即复制一条需要的内容的需求。其实多数情况下防止代码复制无效，都会要显示出来要复制的内容的，只是最近恰好遇到了这样一个需求而已。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于其他功能，都是类似实现，并不复杂，但是要注意只对<strong>可以编辑的文档对象</strong>可以使用。另外它的兼容性还可以了，对于我们不需要兼容低版本浏览器的 PC 端来讲不会有啥大问题，不过对于移动端可能会出现一些问题，比如 Safari 等的不支持，暂时没有用到就不讲了。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand#例子" target="_blank" rel="external">document.execCommand - Web API 接口 | MDN</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于点击按钮就能复制一个链接或其他内容的操作，在很多网站都会有用到。使用原生的js方法 &lt;code&gt;document.execCommand&lt;/code&gt; 即可实现，它能够对&lt;strong&gt;可以编辑的文档对象（设置contentEditable等）&lt;/strong&gt;进行操作。&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;p&gt;它的基本语法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bool = document.execCommand(aCommandName, aShowDefaultUI, aValueArgument)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://zhaoshibo.net/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery插件写法</title>
    <link href="http://zhaoshibo.net/blog/2016/07/17/jQuery%E6%8F%92%E4%BB%B6%E5%86%99%E6%B3%95/"/>
    <id>http://zhaoshibo.net/blog/2016/07/17/jQuery插件写法/</id>
    <published>2016-07-17T12:45:39.000Z</published>
    <updated>2016-10-31T12:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在当前的前端时代，react，vue等框架配合ES6满足了日常的多数开发需求，但是了解jQuery的插件开发在我们开发一些小型项目中还是很有用处。我们可以打造自己的插件达到复用的效果。</p>
<a id="more"></a>
<h2 id="extend方法"><a href="#extend方法" class="headerlink" title="extend方法"></a>extend方法</h2><p>我们首先知道在jQuery中<code>$.fn === $.prototype</code>。如果只是简单的需要一个jQuery的扩展方法，那么我们直接使用<code>$.extend</code>即可达到目的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$.extend(&#123;</div><div class="line">	min: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a &lt; b ? a : b;&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$.min(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p>这种方法往往不是我们想要的，我们多数时候需要操作一个特定的dom从而使用一些自定义方法。这个时候就需要在jQuery的原型进行拓展，也就是这篇文章所要讨论的插件写法，将会使用到<code>$.fn.extend()</code>方法。</p>
<h2 id="外部容器"><a href="#外部容器" class="headerlink" title="外部容器"></a>外部容器</h2><p>首先需要用一个立即执行的函数给我们的插件一个独立的作用域，防止冲突。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">$, window, document, undefined</span>) </span>&#123;</div><div class="line">	<span class="comment">// do sth.</span></div><div class="line">&#125;)(jQuery, <span class="built_in">window</span>, <span class="built_in">document</span>)</div></pre></td></tr></table></figure>
<p>这里把jQuery和系统全局变量传递给插件内部，系统变量在这里实现局部引用可以提高访问速度，<code>undefined</code>是为了得到一个没有修改的<code>undefined</code>，这里没有传第4个参数即是在那个位置得到了真实的<code>undefined</code>。最后我们在最前面加入<code>;</code>，是防止其他人的代码造成干扰从而报错无法运行。</p>
<h2 id="基本插件写法"><a href="#基本插件写法" class="headerlink" title="基本插件写法"></a>基本插件写法</h2><p>有了容器，我们现在就需要定义我们自己的插件了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">$, window, document, undefined</span>) </span>&#123;</div><div class="line">	<span class="comment">// 创建内部对象</span></div><div class="line">	<span class="keyword">var</span> Func = <span class="function"><span class="keyword">function</span> (<span class="params">el, opts</span>) </span>&#123;</div><div class="line">		<span class="keyword">this</span>.$el = $(el);</div><div class="line">		<span class="keyword">this</span>.opts = $.extend(&#123;&#125;, Func.DEFAULTS, opts);</div><div class="line"></div><div class="line">		<span class="comment">// do sth.</span></div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 内部对象的默认参数</span></div><div class="line">	Func.DEFAULTS = &#123;</div><div class="line">		key: <span class="string">'val'</span></div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 内部对象的方法</span></div><div class="line">	Func.prototype = &#123;</div><div class="line">		init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	$.fn.extend(&#123;</div><div class="line">		pluginName: <span class="function"><span class="keyword">function</span> (<span class="params">opts</span>) </span>&#123;</div><div class="line">			<span class="comment">// 实现循环调用</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">new</span> Func(<span class="keyword">this</span>, opts);</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;)(jQuery, <span class="built_in">window</span>, <span class="built_in">document</span>)</div></pre></td></tr></table></figure>
<p>通过上面的代码，我们首先可以自定义自己的插件名字<code>pluginName</code>，以及插件内部需要实现的一些方法。用一个工厂模式来构造我们的方法<code>Func</code>，并且定义一些默认的参数。使用插件时传入对象参数时则更新内部的默认参数。这里暂时没有考虑内部其他方法的参数。</p>
<p>此时我们已经可以使用自定义好的插件了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'el'</span>).pluginName();</div><div class="line"><span class="comment">// $('el').pluginName(&#123;key: newVal&#125;); // 传入参数</span></div></pre></td></tr></table></figure>
<h2 id="向内部方法传参的插件写法"><a href="#向内部方法传参的插件写法" class="headerlink" title="向内部方法传参的插件写法"></a>向内部方法传参的插件写法</h2><p>为了达到插件内部方法还能传参，我们可以在拓展插件时进行一些定义，在pluginName的方法返回值之前做一些判断。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">Func.DEFAULTS = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> methods = &#123;</div><div class="line">	init: <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</div><div class="line">			opts = $.extend(&#123;&#125;, Func.DEFAULTS, opts);</div><div class="line"></div><div class="line">			<span class="comment">// do sth.</span></div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$.fn.pluginName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> method = <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(methods[method]) &#123;</div><div class="line">		method = methods[method];</div><div class="line">		args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>( <span class="keyword">typeof</span>(method) == <span class="string">'object'</span> || !method ) &#123;</div><div class="line">		<span class="comment">// 使用init初始化数据，或者使用new Func()来实例化，则需要在Func内部做一些处理</span></div><div class="line">		method = methods.init;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		$.error( <span class="string">'方法不存在'</span> );</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> method.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在则可以通过第一个参数获取方法，之后的参数为该方法的参数来使用插件内部方法了。多数情况下，插件的具体实现以及关于可拓展性，我们会在上面2种方法中结合使用。</p>
<h2 id="单例模式的优化"><a href="#单例模式的优化" class="headerlink" title="单例模式的优化"></a>单例模式的优化</h2><p>为了插件拥有更好的性能以及减少额外的开销，我们可以根据需要使用单例模式。同样在返回一个实例化对象时我们可以提前判断是否已经存在这么一个实例化对象了。这里简单的拿上述第一个结构为例子，在拓展插件时做一下判断。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$.fn.pluginName = <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    	<span class="comment">// 单例模式</span></div><div class="line">        <span class="keyword">var</span> self = $(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">var</span> instance = self.data(<span class="string">'Func'</span>);</div><div class="line">        <span class="keyword">if</span> (!instance) &#123;</div><div class="line">            instance = <span class="keyword">new</span> Func(self, opts);</div><div class="line">            self.data(<span class="string">'Func'</span>, instance);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 调用插件上的方法，本文中第二种写法可以根据此自由拓展</span></div><div class="line">        <span class="keyword">if</span>($.type(opts) === <span class="string">'string'</span>) <span class="keyword">return</span> instance[opts]();</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在判断实例对象时，我们利用了<code>data()</code>来存放插件对象的实例，同样利用该方法我们可以在<code>Func</code>的内部方法上提供一些数据存取。在不需要的时候使用<code>removeData()</code>来进行删除。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>插件的写法在本篇文章做了总结，但是依然需要在实际开发中按需进行不同的搭配。并且在实际的开发中，一定要辅以一些设计模式，这样才能更好的组织代码，并提供更好的实践。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://blog.jobbole.com/30550/" target="_blank" rel="external">深入理解jQuery插件开发</a></li>
<li><a href="http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html#!comments" target="_blank" rel="external">jQuery插件开发精品教程，让你的jQuery提升一个台阶</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在当前的前端时代，react，vue等框架配合ES6满足了日常的多数开发需求，但是了解jQuery的插件开发在我们开发一些小型项目中还是很有用处。我们可以打造自己的插件达到复用的效果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="jQuery" scheme="http://zhaoshibo.net/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>去除select等标签默认浏览器样式</title>
    <link href="http://zhaoshibo.net/blog/2016/07/17/%E5%8E%BB%E9%99%A4select%E7%AD%89%E6%A0%87%E7%AD%BE%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A0%B7%E5%BC%8F/"/>
    <id>http://zhaoshibo.net/blog/2016/07/17/去除select等标签默认浏览器样式/</id>
    <published>2016-07-17T08:11:47.000Z</published>
    <updated>2016-10-31T12:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>去除select等标签默认浏览器样式的方式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">select</span> &#123;</div><div class="line">	<span class="attribute">-webkit-appearance</span>: none;  <span class="comment">/* chrome */</span></div><div class="line">	   <span class="attribute">-moz-appearance</span>: none;  <span class="comment">/* firefox */</span></div><div class="line">	        <span class="attribute">appearance</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* IE */</span></div><div class="line"><span class="selector-tag">select</span><span class="selector-pseudo">::-ms-expand</span> &#123;</div><div class="line">	<span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去除select等标签默认浏览器样式的方式：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;
    
    </summary>
    
    
      <category term="Tips" scheme="http://zhaoshibo.net/tags/Tips/"/>
    
      <category term="CSS" scheme="http://zhaoshibo.net/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局</title>
    <link href="http://zhaoshibo.net/blog/2016/05/04/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://zhaoshibo.net/blog/2016/05/04/flex布局/</id>
    <published>2016-05-04T00:06:01.000Z</published>
    <updated>2016-10-31T12:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flexible-Box-Layout"><a href="#Flexible-Box-Layout" class="headerlink" title="Flexible Box Layout"></a>Flexible Box Layout</h1><blockquote>
<p>CSS 弹性框布局是 CSS 的模块之一，定义了一种针对用户界面设计而优化的 CSS 框模型。在弹性布局模型中，弹性容器的子元素可以在任何方向上排布，也可以“弹性伸缩”其尺寸，既可以增加尺寸以填满未使用的空间，也可以收缩尺寸以避免父元素溢出。子元素的水平对齐和垂直对齐都能很方便的进行操控。通过嵌套这些框（水平框在垂直框内，或垂直框在水平框内）可以在两个维度上构建布局。</p>
</blockquote>
<a id="more"></a>
<p>弹性布局在定义方面是指调整其内项目宽高从而在任何显示设备上实现对可用显示空间最佳填充的能力。弹性容器扩展其内项目来填充可用空间，或将其收缩来避免溢出。</p>
<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2016/05/flex布局/flexbox.png" alt="flexbox"></p>
<p>容器默认存在两根轴：<code>main axis</code>（从<code>main-start</code>向<code>main-end</code>）或者<code>cross axis</code>（从<code>cross-start</code>向<code>cross-end</code>）。</p>
<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的侧轴空间叫做<code>cross size</code>。</p>
<ul>
<li><strong>main axis</strong>：Flex容器的主轴主要用来配置Flex项目。它的方向取决于<code>flex-direction</code>属性。</li>
<li><strong>main-start</strong> | <strong>main-end</strong>：Flex项目的配置从容器的主轴起点边开始，往主轴终点边结束。</li>
<li><strong>main size</strong>：Flex项目的在主轴方向的宽度或高度就是项目的主轴长度，Flex项目的主轴长度属性是<code>width</code>或<code>height</code>属性，由哪一个对着主轴方向决定。</li>
<li><strong>cross axis</strong>：与主轴垂直的轴称作侧轴，是侧轴方向的延伸。</li>
<li><strong>cross-start</strong> | <strong>cross-end</strong>：伸缩行的配置从容器的侧轴起点边开始，往侧轴终点边结束。</li>
<li><strong>cross size</strong>：Flex项目的在侧轴方向的宽度或高度就是项目的侧轴长度，Flex项目的侧轴长度属性是<code>width</code>或<code>height</code>属性，由哪一个对着侧轴方向决定。</li>
</ul>
<h2 id="2-外层父容器属性"><a href="#2-外层父容器属性" class="headerlink" title="2. 外层父容器属性"></a>2. 外层父容器属性</h2><p>定义一个Flex容器，根据其取的值来决定是内联还是块。Flex容器会为其内容建立新的伸缩格式化上下文。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">	display: flex | inline-flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，Flex容器不是块容器，因此有些设计用来控制块布局的属性在Flexbox布局中不适用。特别是：多列组中所有<code>column-*</code>属性、<code>float</code>、<code>clear</code>属性和<code>vertical-align</code>属性在Flex容器上没有作用。</p>
<p>以下6个属性设置在父容器上。</p>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ul>
<h3 id="2-1-flex-direction"><a href="#2-1-flex-direction" class="headerlink" title="2.1 flex-direction"></a>2.1 flex-direction</h3><p>弹性容器的各个边描述了弹性条目流的起点与终点。它们决定了弹性容器的主轴方向（从左到右、从右到左，等等）。</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2016/05/flex布局/flex-direction.png" alt="flex-direction"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  flex-direction: row | row-reverse | column | column-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>row（默认值）：主轴为水平方向，起点在左端。</li>
<li>row-reverse：主轴为水平方向，起点在右端。</li>
<li>column：主轴为垂直方向，起点在上沿。</li>
<li>column-reverse：主轴为垂直方向，起点在下沿。</li>
</ul>
<h3 id="2-2-flex-wrap"><a href="#2-2-flex-wrap" class="headerlink" title="2.2 flex-wrap"></a>2.2 flex-wrap</h3><p>默认情况之下，Flex项目都尽可能在一行显示。你可以根据flex-wrap的属性值来改变，让Flex项目多行显示。</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2016/05/flex布局/flex-wrap.png" alt="flex-wrap"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">   flex-wrap: nowrap | wrap | wrap-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>nowrap(默认值)：不换行。</li>
<li>wrap：换行，第一行在<strong>下方</strong>。</li>
<li>wrap-reverse：换行，第一行在<strong>上方</strong>。</li>
</ul>
<h3 id="2-3-flex-flow"><a href="#2-3-flex-flow" class="headerlink" title="2.3 flex-flow"></a>2.3 flex-flow</h3><p>这是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">   flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-4-justify-content"><a href="#2-4-justify-content" class="headerlink" title="2.4 justify-content"></a>2.4 justify-content</h3><p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2016/05/flex布局/justify-content.png" alt="justify-content"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">   justify-content: flex-start | flex-end | center | space-between | space-around;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>flex-start（默认值）：左对齐。</li>
<li>flex-end：右对齐。</li>
<li>center：居中。</li>
<li>space-between：两端对齐，项目之间的间隔都相等。</li>
<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
<h3 id="2-5-align-items"><a href="#2-5-align-items" class="headerlink" title="2.5 align-items"></a>2.5 align-items</h3><p>定义项目在侧轴上如何对齐。</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2016/05/flex布局/align-items.png" alt="align-items"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">   align-items: flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>flex-start：侧轴的起点对齐。</li>
<li>flex-end：侧轴的终点对齐。</li>
<li>center：侧轴的中点对齐。</li>
<li>baseline：项目的第一行文字的基线对齐。</li>
<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
<h3 id="2-6-align-content"><a href="#2-6-align-content" class="headerlink" title="2.6 align-content"></a>2.6 align-content</h3><p>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2016/05/flex布局/align-content.png" alt="align-content"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">   align-content: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>flex-start：与侧轴的起点对齐。</li>
<li>flex-end：与侧轴的终点对齐。</li>
<li>center：与侧轴的中点对齐。</li>
<li>space-between：与侧轴两端对齐，轴线之间的间隔平均分布。</li>
<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li>stretch（默认值）：轴线占满整个侧轴。</li>
</ul>
<h2 id="3-子元素项目属性"><a href="#3-子元素项目属性" class="headerlink" title="3. 子元素项目属性"></a>3. 子元素项目属性</h2><p>以下6个属性设置在子项目上。</p>
<ul>
<li>order</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
<li>flex</li>
<li>align-self</li>
</ul>
<h3 id="3-1-order"><a href="#3-1-order" class="headerlink" title="3.1 order"></a>3.1 order</h3><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0，有最小（负值最大）order的伸缩项目排在第一个。</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2016/05/flex布局/order.png" alt="order"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	order: <span class="xml"><span class="tag">&lt;<span class="name">integer</span>&gt;</span>;</span></div><div class="line"><span class="xml">&#125;</span></div></pre></td></tr></table></figure>
<h3 id="3-2-flex-grow"><a href="#3-2-flex-grow" class="headerlink" title="3.2 flex-grow"></a>3.2 flex-grow</h3><p>定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>
<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2016/05/flex布局/flex-grow.png" alt="flex-grow"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex-grow: <span class="xml"><span class="tag">&lt;<span class="name">number</span>&gt;</span>; /* default 0 */</span></div><div class="line"><span class="xml">&#125;</span></div></pre></td></tr></table></figure>
<h3 id="3-3-flex-shrink"><a href="#3-3-flex-shrink" class="headerlink" title="3.3 flex-shrink"></a>3.3 flex-shrink</h3><p>定义了项目的缩小比例，默认为1(负值无效)，即如果空间不足，该项目将缩小。</p>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2016/05/flex布局/flex-shrink.jpg" alt="flex-shrink"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	flex-shrink: <span class="xml"><span class="tag">&lt;<span class="name">number</span>&gt;</span>; /* default 1 */</span></div><div class="line"><span class="xml">&#125;</span></div></pre></td></tr></table></figure>
<h3 id="3-4-flex-basis"><a href="#3-4-flex-basis" class="headerlink" title="3.4 flex-basis"></a>3.4 flex-basis</h3><p>定义了Flex项目在分配Flex容器剩余空间之前的一个默认尺寸。<code>main-size</code>值使它具有匹配的宽度或高度，不过都需要取决于<code>flex-direction</code>的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  flex-basis: <span class="xml"><span class="tag">&lt;<span class="name">length</span>&gt;</span> | auto; /* default auto */</span></div><div class="line"><span class="xml">&#125;</span></div></pre></td></tr></table></figure>
<h3 id="3-5-flex"><a href="#3-5-flex" class="headerlink" title="3.5 flex"></a>3.5 flex</h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。    </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  flex: none | [ <span class="xml"><span class="tag">&lt;<span class="name">'flex-grow'</span>&gt;</span> <span class="tag">&lt;<span class="name">'flex-shrink'</span>&gt;</span>? || <span class="tag">&lt;<span class="name">'flex-basis'</span>&gt;</span> ]</span></div><div class="line"><span class="xml">&#125;</span></div></pre></td></tr></table></figure>
<p>建议使用简写属性，而不是设置单独属性。</p>
<ul>
<li>auto (1 1 auto)</li>
<li>none (0 0 auto)。</li>
</ul>
<h3 id="3-6-align-self"><a href="#3-6-align-self" class="headerlink" title="3.6 align-self"></a>3.6 align-self</h3><p>允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2016/05/flex布局/align-self.png" alt="align-self"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">	align-self: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>flex-start：侧轴的起点对齐。</li>
<li>flex-end：侧轴的终点对齐。</li>
<li>center：侧轴的中点对齐。</li>
<li>baseline：项目的第一行文字的基线对齐。</li>
<li>stretch：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
<h2 id="4-兼容性"><a href="#4-兼容性" class="headerlink" title="4. 兼容性"></a>4. 兼容性</h2><iframe width="100%" height="380" src="http://caniuse.com/flexbox/embed"></iframe>

<ul>
<li>iOS和Android4.4以上可以使用最新的flex布局</li>
<li>Android4.4以下兼容旧版flexbox布局</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">display</span>: -webkit-box;</div><div class="line"><span class="attribute">display</span>: -webkit-flex;</div><div class="line"><span class="attribute">display</span>: -ms-flexbox;</div><div class="line"><span class="attribute">display</span>: flex;</div><div class="line"></div><div class="line">-webkit-box-<span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">	-webkit-<span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">	    -ms-<span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">	        <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line"></div><div class="line">-webkit-box-pack: center;</div><div class="line">	-webkit-<span class="attribute">justify-content</span>: center;</div><div class="line">	    -ms-<span class="attribute">flex</span>-pack: center;</div><div class="line">	        <span class="attribute">justify-content</span>: center;</div><div class="line"></div><div class="line">-webkit-box-align: center;</div><div class="line">	-webkit-<span class="attribute">align-items</span>: center;</div><div class="line">	    -ms-<span class="attribute">flex</span>-align: center;</div><div class="line">	        <span class="attribute">align-items</span>: center;</div></pre></td></tr></table></figure>
<h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5 参考资料"></a>5 参考资料</h2><ol>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex 布局教程：语法篇</a></li>
<li><a href="http://www.w3cplus.com/css3/a-guide-to-flexbox-new.html" target="_blank" rel="external">一个完整的Flexbox指南</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flexible-Box-Layout&quot;&gt;&lt;a href=&quot;#Flexible-Box-Layout&quot; class=&quot;headerlink&quot; title=&quot;Flexible Box Layout&quot;&gt;&lt;/a&gt;Flexible Box Layout&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;CSS 弹性框布局是 CSS 的模块之一，定义了一种针对用户界面设计而优化的 CSS 框模型。在弹性布局模型中，弹性容器的子元素可以在任何方向上排布，也可以“弹性伸缩”其尺寸，既可以增加尺寸以填满未使用的空间，也可以收缩尺寸以避免父元素溢出。子元素的水平对齐和垂直对齐都能很方便的进行操控。通过嵌套这些框（水平框在垂直框内，或垂直框在水平框内）可以在两个维度上构建布局。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CSS3" scheme="http://zhaoshibo.net/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>关于CSS3的3D属性</title>
    <link href="http://zhaoshibo.net/blog/2016/01/31/%E5%85%B3%E4%BA%8ECSS3%E7%9A%843D%E5%B1%9E%E6%80%A7/"/>
    <id>http://zhaoshibo.net/blog/2016/01/31/关于CSS3的3D属性/</id>
    <published>2016-01-31T10:05:19.000Z</published>
    <updated>2016-10-31T12:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于CSS3的3D变换，属于一接触就能让人倍感兴趣的属性。参考了一些网上的资料，做一些总结，这里只讨论遇到的可使用的属性。</p>
<a id="more"></a>
<h3 id="rotate旋转"><a href="#rotate旋转" class="headerlink" title="rotate旋转"></a>rotate旋转</h3><p>在此之前，我们首先建立一个3D的概念，在电脑上，我们看得到也最好理解的便是XY轴。屏幕自左向右为X轴，则沿着X轴的上下旋转即为<code>rotateX</code>；屏幕自上向下为Y轴，则沿着Y轴左右旋转即为<code>rotateY</code>；以屏幕为水平面，眼睛看向电脑的现实水平方向则为Z轴（可以想象为一条线从屏幕中水平穿出来），则沿着Z轴的旋转为<code>rotateZ</code>。有了这些概念再来看一个在平时2D的CSS3中从未使用过的<code>translateZ</code>属性。</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2016%2F01%2F%E5%85%B3%E4%BA%8ECSS3%E7%9A%843D%E5%B1%9E%E6%80%A7%2Frotate.jpg" alt="rotate旋转演示"></p>
<h3 id="translateZ位移"><a href="#translateZ位移" class="headerlink" title="translateZ位移"></a>translateZ位移</h3><p>理解了旋转的话，那么位移这个属性实在是简单多了。既然Z轴可以理解为从显示器发射出来的那条线，那么沿着这条线往外位移，也就是向靠近眼睛方向的移动为translateZ(正数)，反之参数为负数，也就是远离你的眼睛。</p>
<p><img src="http://7xlivs.com1.z0.glb.clouddn.com/2016%2F01%2F%E5%85%B3%E4%BA%8ECSS3%E7%9A%843D%E5%B1%9E%E6%80%A7%2FtranslateZ.jpg" alt="translateZ位移演示"></p>
<h3 id="perspective透视"><a href="#perspective透视" class="headerlink" title="perspective透视"></a>perspective透视</h3><p><code>perspective</code>指的是透视，在3D设置中起着幕布布景的含义。这个属性应用于父元素也就是舞台元素上，设置的参数意味着你的眼睛距离屏幕图像的距离，如<code>perspective： 200px</code>，则意味着你再距离屏幕200像素的距离观察图像。</p>
<p>假设父元素中设置<code>perspective： 200px</code>，此时在子元素中设置<code>tranzlateZ</code>的值越小，则越深入屏幕内部，相当于现实中物体远离眼睛，看到的物体也越小，相反，值越接近200px，则物体看起来越大。如果超过这个值那就相当于到了我们的脑后了，则什么也就看不到了。关于旋转，也等同于现实中远近距离下观察到的角度。</p>
<p>提到把“我们个人”作为观察者，就不得不提关于观察点的设置——<code>perspective-origin</code>，即我们眼睛所看到的中心点。这个值默认为图像的中心点，如果设置<code>perspective-origin： 25% 50%</code>；则意味着在图像中心点上方一半距离的位置。</p>
<h3 id="preserve-3d"><a href="#preserve-3d" class="headerlink" title="preserve-3d"></a>preserve-3d</h3><p>在子元素上设置<code>transform-style: preserve-3d</code>就是为它们配置3D效果，另一个参数<code>flat</code>暂时没有遇到，不做讨论。这个属性一般设置在3D变换元素的父元素上即舞台元素上。该效果设置后，图像旋转位移等的表现形式为相对于你在现实世界中的表现类似于看镜子。</p>
<h3 id="backface-visibility"><a href="#backface-visibility" class="headerlink" title="backface-visibility"></a>backface-visibility</h3><p>默认情况当多个图像重叠时，我们会透视看到后面的图像，与现实表现不符。因此设置<code>backface-visibility： hidden</code>，则可以让其与现实表现一致，即被遮挡的部分我们看不到。</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>大致情况下的HTML结构为：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> 父元素（舞台元素）（增加一定的视距 perspective）</span></div><div class="line"><span class="ruby">	- <span class="number">3</span>D容器(声明 transform-<span class="symbol">style:</span> preserve-<span class="number">3</span>d)</span></div><div class="line"><span class="ruby">		- 图片等元素（需要<span class="number">3</span>D效果的元素）</span></div><div class="line"><span class="ruby">		- 图片等元素</span></div><div class="line"><span class="ruby">		- 若干...</span></div></pre></td></tr></table></figure>
<p>示例一个简单的3D旋转导航栏效果：<a href="http://www.zhaoshibo.net/mydemo/demo/3D旋转导航栏.html" target="_blank" rel="external">Click Me！</a></p>
<p>本文知识面比较浅，单纯的记录了各属性如何使用，还有很多细节需要动手实践才能发现。比如<code>transform</code>多属性时，旋转和位移等属性的书写顺序也会影响结果，不过根据这个顺序也可以做出其他的变换。不多说，多实践才可行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于CSS3的3D变换，属于一接触就能让人倍感兴趣的属性。参考了一些网上的资料，做一些总结，这里只讨论遇到的可使用的属性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS3" scheme="http://zhaoshibo.net/tags/CSS3/"/>
    
  </entry>
  
</feed>
